/*
 * generated by Xtext 2.26.0
 */
grammar InternalQUBO;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package at.jku.se.qubo.lang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.se.qubo.lang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import at.jku.se.qubo.lang.services.QUBOGrammarAccess;

}
@parser::members {
	private QUBOGrammarAccess grammarAccess;

	public void setGrammarAccess(QUBOGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleQubo
entryRuleQubo
:
{ before(grammarAccess.getQuboRule()); }
	 ruleQubo
{ after(grammarAccess.getQuboRule()); } 
	 EOF 
;

// Rule Qubo
ruleQubo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuboAccess().getGroup()); }
		(rule__Qubo__Group__0)
		{ after(grammarAccess.getQuboAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatrix
entryRuleMatrix
:
{ before(grammarAccess.getMatrixRule()); }
	 ruleMatrix
{ after(grammarAccess.getMatrixRule()); } 
	 EOF 
;

// Rule Matrix
ruleMatrix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatrixAccess().getGroup()); }
		(rule__Matrix__Group__0)
		{ after(grammarAccess.getMatrixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRow
entryRuleRow
:
{ before(grammarAccess.getRowRule()); }
	 ruleRow
{ after(grammarAccess.getRowRule()); } 
	 EOF 
;

// Rule Row
ruleRow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRowAccess().getGroup()); }
		(rule__Row__Group__0)
		{ after(grammarAccess.getRowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEDouble
entryRuleEDouble
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEDoubleAccess().getAlternatives()); }
		(rule__EDouble__Alternatives)
		{ after(grammarAccess.getEDoubleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEDoubleAccess().getE_INTTerminalRuleCall_0()); }
		RULE_E_INT
		{ after(grammarAccess.getEDoubleAccess().getE_INTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEDoubleAccess().getE_DOUBLETerminalRuleCall_1()); }
		RULE_E_DOUBLE
		{ after(grammarAccess.getEDoubleAccess().getE_DOUBLETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group__0__Impl
	rule__Qubo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getQuboAction_0()); }
	()
	{ after(grammarAccess.getQuboAccess().getQuboAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group__1__Impl
	rule__Qubo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getQuboKeyword_1()); }
	'Qubo'
	{ after(grammarAccess.getQuboAccess().getQuboKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group__2__Impl
	rule__Qubo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getQuboAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group__3__Impl
	rule__Qubo__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getGroup_3()); }
	(rule__Qubo__Group_3__0)?
	{ after(grammarAccess.getQuboAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getQuboAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qubo__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group_3__0__Impl
	rule__Qubo__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getMatrixKeyword_3_0()); }
	'matrix'
	{ after(grammarAccess.getQuboAccess().getMatrixKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qubo__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qubo__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuboAccess().getMatrixAssignment_3_1()); }
	(rule__Qubo__MatrixAssignment_3_1)
	{ after(grammarAccess.getQuboAccess().getMatrixAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Matrix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group__0__Impl
	rule__Matrix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getMatrixAction_0()); }
	()
	{ after(grammarAccess.getMatrixAccess().getMatrixAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group__1__Impl
	rule__Matrix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getMatrixAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group__2__Impl
	rule__Matrix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getGroup_2()); }
	(rule__Matrix__Group_2__0)?
	{ after(grammarAccess.getMatrixAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getMatrixAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Matrix__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group_2__0__Impl
	rule__Matrix__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getRowsAssignment_2_0()); }
	(rule__Matrix__RowsAssignment_2_0)
	{ after(grammarAccess.getMatrixAccess().getRowsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getGroup_2_1()); }
	(rule__Matrix__Group_2_1__0)*
	{ after(grammarAccess.getMatrixAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Matrix__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group_2_1__0__Impl
	rule__Matrix__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getMatrixAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Matrix__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixAccess().getRowsAssignment_2_1_1()); }
	(rule__Matrix__RowsAssignment_2_1_1)
	{ after(grammarAccess.getMatrixAccess().getRowsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__0__Impl
	rule__Row__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRowAction_0()); }
	()
	{ after(grammarAccess.getRowAccess().getRowAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__1__Impl
	rule__Row__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getRowAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__2__Impl
	rule__Row__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getGroup_2()); }
	(rule__Row__Group_2__0)?
	{ after(grammarAccess.getRowAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getRowAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_2__0__Impl
	rule__Row__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getColumnsAssignment_2_0()); }
	(rule__Row__ColumnsAssignment_2_0)
	{ after(grammarAccess.getRowAccess().getColumnsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getGroup_2_1()); }
	(rule__Row__Group_2_1__0)*
	{ after(grammarAccess.getRowAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_2_1__0__Impl
	rule__Row__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getRowAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getColumnsAssignment_2_1_1()); }
	(rule__Row__ColumnsAssignment_2_1_1)
	{ after(grammarAccess.getRowAccess().getColumnsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnAction_0()); }
	()
	{ after(grammarAccess.getColumnAccess().getColumnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getValueAssignment_1()); }
	(rule__Column__ValueAssignment_1)
	{ after(grammarAccess.getColumnAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qubo__MatrixAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuboAccess().getMatrixMatrixParserRuleCall_3_1_0()); }
		ruleMatrix
		{ after(grammarAccess.getQuboAccess().getMatrixMatrixParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__RowsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_2_0_0()); }
		ruleRow
		{ after(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Matrix__RowsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_2_1_1_0()); }
		ruleRow
		{ after(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__ColumnsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getColumnsColumnParserRuleCall_2_0_0()); }
		ruleColumn
		{ after(grammarAccess.getRowAccess().getColumnsColumnParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__ColumnsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getColumnsColumnParserRuleCall_2_1_1_0()); }
		ruleColumn
		{ after(grammarAccess.getRowAccess().getColumnsColumnParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getValueEDoubleParserRuleCall_1_0()); }
		ruleEDouble
		{ after(grammarAccess.getColumnAccess().getValueEDoubleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_E_INT : '-'? RULE_INT;

RULE_E_DOUBLE : '-'? RULE_INT ('.' RULE_INT+)? (('E'|'e') ('+'|'-')? RULE_INT)?;

fragment RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
