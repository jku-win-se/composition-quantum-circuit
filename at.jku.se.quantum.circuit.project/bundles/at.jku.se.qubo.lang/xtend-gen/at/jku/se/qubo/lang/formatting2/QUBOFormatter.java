/**
 * generated by Xtext 2.26.0
 */
package at.jku.se.qubo.lang.formatting2;

import at.jku.se.qubo.lang.services.QUBOGrammarAccess;
import at.jku.se.qubo.mm.qubo.Matrix;
import at.jku.se.qubo.mm.qubo.Qubo;
import at.jku.se.qubo.mm.qubo.Row;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class QUBOFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private QUBOGrammarAccess _qUBOGrammarAccess;
  
  protected void _format(final Qubo qubo, @Extension final IFormattableDocument document) {
    document.<Matrix>format(qubo.getMatrix());
  }
  
  protected void _format(final Matrix matrix, @Extension final IFormattableDocument document) {
    EList<Row> _rows = matrix.getRows();
    for (final Row row : _rows) {
      document.<Row>format(row);
    }
  }
  
  public void format(final Object matrix, final IFormattableDocument document) {
    if (matrix instanceof XtextResource) {
      _format((XtextResource)matrix, document);
      return;
    } else if (matrix instanceof Matrix) {
      _format((Matrix)matrix, document);
      return;
    } else if (matrix instanceof Qubo) {
      _format((Qubo)matrix, document);
      return;
    } else if (matrix instanceof EObject) {
      _format((EObject)matrix, document);
      return;
    } else if (matrix == null) {
      _format((Void)null, document);
      return;
    } else if (matrix != null) {
      _format(matrix, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(matrix, document).toString());
    }
  }
}
