/**
 * generated by Xtext 2.26.0
 */
package at.jku.se.qubo.lang.generator;

import at.jku.se.qubo.lang.utils.QuboUtils;
import at.jku.se.qubo.mm.qubo.Qubo;
import java.util.Collections;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import qucircuit.QuCircuitPackage;
import qucircuit.QuantumCircuit;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class QUBOGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      URI _appendSegment = fsa.getURI("/").trimSegments(1).appendSegment("qu-circuit");
      String _lastSegment = resource.getURI().trimFileExtension().lastSegment();
      String _plus = (_lastSegment + QuCircuitPackage.eNS_PREFIX);
      URI quCircuitURI = _appendSegment.appendSegment(_plus);
      ResourceSet reset = resource.getResourceSet();
      Resource quCircuit = reset.createResource(quCircuitURI);
      quCircuit.getContents().add(this.createQuboCircuit(resource));
      quCircuit.save(Collections.EMPTY_MAP);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public QuantumCircuit createQuboCircuit(final Resource resource) {
    EObject _get = resource.getContents().get(0);
    Qubo qubo = ((Qubo) _get);
    return QuboUtils.createQuboCircuit(qubo);
  }
}
