/*
 * generated by Xtext 2.26.0
 */
package qubo.lang.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import qubo.Column;
import qubo.Matrix;
import qubo.Qubo;
import qubo.QuboPackage;
import qubo.Row;
import qubo.lang.services.QUBOGrammarAccess;

@SuppressWarnings("all")
public class QUBOSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QUBOGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QuboPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QuboPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case QuboPackage.MATRIX:
				sequence_Matrix(context, (Matrix) semanticObject); 
				return; 
			case QuboPackage.QUBO:
				sequence_Qubo(context, (Qubo) semanticObject); 
				return; 
			case QuboPackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     value=EDouble
	 * </pre>
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuboPackage.Literals.COLUMN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuboPackage.Literals.COLUMN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnAccess().getValueEDoubleParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Matrix returns Matrix
	 *
	 * Constraint:
	 *     (rows+=Row rows+=Row*)?
	 * </pre>
	 */
	protected void sequence_Matrix(ISerializationContext context, Matrix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Qubo returns Qubo
	 *
	 * Constraint:
	 *     matrix=Matrix?
	 * </pre>
	 */
	protected void sequence_Qubo(ISerializationContext context, Qubo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Row returns Row
	 *
	 * Constraint:
	 *     (columns+=Column columns+=Column*)?
	 * </pre>
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
