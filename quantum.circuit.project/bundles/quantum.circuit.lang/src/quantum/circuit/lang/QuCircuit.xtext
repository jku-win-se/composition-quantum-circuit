// automatically generated by Xtext
grammar quantum.circuit.lang.QuCircuit with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/QuCircuit" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/QuantumOpe" as quope
import "http://www.eclipse.org/Qubo" as qubo

QuantumCircuit returns QuantumCircuit:
	'QuantumCircuit'
	name=EString
	'{'
		quantumRegisters+=QuantumRegister (quantumRegisters+=QuantumRegister)*  
		(classicRegisters+=ClassicRegister)*
		layers+=Layer (layers+=Layer)*
	'}'
	;

QuantumRegister returns QuantumRegister:
	{QuantumRegister}
	'QuantumRegister'
	name=EString
	'{'
		('NumberOfQubits' numberOfQubits=INT)?
	'}';


ClassicRegister returns ClassicRegister:
	{ClassicRegister}
	'ClassicRegister'
	name=EString
	'{'
		('NumberOfBits'  numberOfBits=INT)?
	'}';

Layer returns Layer:
	{Layer}
	'Layer'
	name=EString
	'{'
		quantumOperations+=QuantumOperation ( "," quantumOperations+=QuantumOperation)*
	'}';

QuantumOperation returns QuantumOperation:
	StatePreparation | ElementaryQuantumGate | Measurement  | CompositeQuantumGate | Loop 
	;

StatePreparation returns StatePreparation:
	'StatePreparation'
	name=EString
	'{'
		'operation' operations+=Operation ( "," operations+=Operation)*
		'targetQubits' '[' targetQubits+=Selector ( "," targetQubits+=Selector)* ']'
		//TODO classic control 
		//('classicControl' classicControl=ClassicControl)?
	'}';

ElementaryQuantumGate returns ElementaryQuantumGate:
	'ElementaryQuantumGate'
	(inverseForm?='inverseForm')?
	name=EString
	'{'
		('operation' operations+=Operation)?
		'targetQubits' '[' '(' targetQubits+=Selector ')' ( "," '(' targetQubits+=Selector ')')* ']'
		('controlQubits' '[' controlQubits+=Selector ( "," controlQubits+=Selector)* ']')*
		//TODO ('classicControl' classicControl=ClassicControl)?
		('angleParameter' angleParameter=AngleParameter)?
	'}';	
	
AngleParameter returns AngleParameter:
	{AngleParameter}
	'AngleParameter'
	'{'
		('theta' theta=EDoubleObject)?
		('phi' phi=EDoubleObject)?
		('lambda' lambda=EDoubleObject)?
	'}';

Measurement returns Measurement:
	'Measurement'
	name=EString
	'{'
		('operation' operations+=Operation)?
		'targetQubits' '[' '(' targetQubits+=Selector ')' ( "," '(' targetQubits+=Selector ')')* ']' 
		'classicBits' '[' '(' classicBits+=Selector  ')' ( "," '(' classicBits+=Selector ')')* ']' 
		//TODO ('classicControl' classicControl=ClassicControl)?
	'}';

CompositeQuantumGate returns CompositeQuantumGate:
	'CompositeQuantumGate'
	name=EString
	'{'
		(inverseForm?='inverseForm')?
		('operation' operations+=Operation)?
		'targetQubits' '[' '(' targetQubits+=Selector ')' ( ","  '(' targetQubits+=Selector ')' )* ']' 
		('controlQubits' '[' controlQubits+=Selector ( "," controlQubits+=Selector)* ']' )?
		//TODO ('classicControl' classicControl=ClassicControl)?
		//TODO ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?		
	'}';
	
Loop returns LoopOperation:
	'Loop'
	name=EString
	'{'	
		(inverseForm?='inverseForm')?
		(incrementBlockTargetQubits?='incrementBlockTargetQubits')?
		(incrementBlockControlQubits?='incrementBlockControlQubits')?
		('iterations' iterations=INT)?
		(incrementTargetQubits?='incrementTargetQubits')?
		(incrementControlQubits?='incrementControlQubits')?
		('targetQubitsBlockSize' targetQubitsBlockSize=INT)?
		('controlQubitsBlockSize' controlQubitsBlockSize=INT)?
		('controlQubitsIterationType' controlQubitsIterationType=ITERATION_TYPE)?
		('targetQubitsIterationType' targetQubitsIterationType=ITERATION_TYPE)?
		('incrementBy' incrementBy=INT)?
		('operations' '(' operations+=Operation ( "," operations+=Operation)* ')')?
		'targetQubits' '[' '(' targetQubits+=Selector ')' ( "," '(' targetQubits+=Selector ')' )* ']' 
		('controlQubits' '[' controlQubits+=Selector ( "," controlQubits+=Selector)* ']' )?
		('fixedControlQubits' '[' fixedControlQubits+=Selector ( "," fixedControlQubits+=Selector)* ']' )?
		('fixedTargetQubits' '[' fixedTargetQubits+=Selector ( "," fixedTargetQubits+=Selector)* ']' )?
		'loop' loop=[quope::ConcreteLoopOperation|EString]
		'loopTargetQubits' '[' '(' loopTargetQubits+=Selector ')' ( "," '(' loopTargetQubits+=Selector ')')* ']' 
		('loopControlQubits' '[' '(' loopControlQubits+=Selector ')' ( "," '(' loopControlQubits+=Selector ')' )* ']' )?
//TODO	('classicControl' classicControl=ClassicControl)?
//		('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
	'}';
	
Operation returns Operation:
	operation=[quope::ConcreteQuantumOperation|EString] ('(' qubo=[qubo::Qubo|EString] ')')?	
	;	

Selector returns Selector:
	ElementSelector | RangeSelector
	;
	
ElementSelector returns ElementSelector:
	{ElementSelector}
	(register=[Register|EString] ',')? index=INT
	;

RangeSelector returns RangeSelector:
	{RangeSelector}
	(register=[Register|EString] ',')? begin=INT'-'end=INT
	;


//
//
//
//
//
//
//
//
//
//
//
//EStructuralFeature returns ecore::EStructuralFeature:
//	EAttribute | EReference;
//
//
//
//
//EClassifier returns ecore::EClassifier:
//	EClass | EDataType_Impl | EEnum;
//
//
//
//
//
EString returns ecore::EString:
	STRING | ID;
//
//
//
//Qubit returns Qubit:
//	{Qubit}
//	'Qubit'
//	id=EIntegerObject;
//
//EIntegerObject returns ecore::EIntegerObject:
//	'-'? INT;
//
//ClassicBit returns ClassicBit:
//	{ClassicBit}
//	'ClassicBit'
//	id=EIntegerObject;
//
//ClassicControl returns ClassicControl:
//	'ClassicControl'
//	'{'
//		('value' value=EDoubleObject)?
//		'classicRegister' classicRegister=[ClassicRegister|EString]
//	'}';
//
//ConcreteQuantumOperation returns quope::ConcreteQuantumOperation:
//	(reversible?='reversible')?
//	'ConcreteQuantumOperation'
//	name=EString
//	'{'
//		('abbreviation' abbreviation=EString)?
//		('paletteIconPath' paletteIconPath=EString)?
//		('styleIconPath' styleIconPath=EString)?
//		'type' type=[ecore::EClass|EString]
//		('reverse' reverse=[quope::ConcreteQuantumOperation|EString])?
//		('parameter' parameter=Parameter)?
//		('fixedQuantumOperation' fixedQuantumOperation=FixedQuantumOperation)?
//	'}';
//
//
//
//
//
//
EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
//
//EClass returns ecore::EClass:
//	{ecore::EClass}
//	(abstract?='abstract')?
//	(interface?='interface')?
//	'EClass'
//	name=EString
//	'{'
//		('instanceClassName' instanceClassName=EString)?
//		('instanceTypeName' instanceTypeName=EString)?
//		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
//		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
//		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
//		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
//	'}';
//
//Parameter returns quope::Parameter:
//	{quope::Parameter}
//	(theta?='theta')?
//	(phi?='phi')?
//	(lambda?='lambda')?
//	'Parameter'
//	;
//
//FixedQuantumOperation returns quope::FixedQuantumOperation:
//	'FixedQuantumOperation'
//	'{'
//		'numberOfTargetQubits' numberOfTargetQubits=EIntegerObject
//		'numberOfControlQubits' numberOfControlQubits=EIntegerObject
//		'numberOfClassicBits' numberOfClassicBits=EIntegerObject
//	'}';
//
//EBooleanObject returns ecore::EBooleanObject:
//	'true' | 'false';
//
//EAnnotation returns ecore::EAnnotation:
//	{ecore::EAnnotation}
//	'EAnnotation'
//	'{'
//		('source' source=EString)?
//		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
//		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
//	'}';
//
//ETypeParameter returns ecore::ETypeParameter:
//	{ecore::ETypeParameter}
//	'ETypeParameter'
//	name=EString
//	'{'
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
//	'}';
//
//EBoolean returns ecore::EBoolean:
//	'true' | 'false';
//
//EOperation returns ecore::EOperation:
//	{ecore::EOperation}
//	'EOperation'
//	name=EString
//	'{'
//		('ordered' ordered=EBoolean)?
//		('unique' unique=EBoolean)?
//		('lowerBound' lowerBound=EInt)?
//		('upperBound' upperBound=EInt)?
//		('eType' eType=[ecore::EClassifier|EString])?
//		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eGenericType' eGenericType=EGenericType)?
//		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
//		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
//		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
//	'}';
//
//EGenericType returns ecore::EGenericType:
//	{ecore::EGenericType}
//	'EGenericType'
//	'{'
//		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
//		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
//		('eUpperBound' eUpperBound=EGenericType)?
//		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
//		('eLowerBound' eLowerBound=EGenericType)?
//	'}';
//
//EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
//	{ecore::EStringToStringMapEntry}
//	'EStringToStringMapEntry'
//	'{'
//		('key' key=EString)?
//		('value' value=EString)?
//	'}';
//
//EObject returns ecore::EObject:
//	{ecore::EObject}
//	'EObject'
//	;
//
//EInt returns ecore::EInt:
//	'-'? INT;
//
//EParameter returns ecore::EParameter:
//	{ecore::EParameter}
//	'EParameter'
//	name=EString
//	'{'
//		('ordered' ordered=EBoolean)?
//		('unique' unique=EBoolean)?
//		('lowerBound' lowerBound=EInt)?
//		('upperBound' upperBound=EInt)?
//		('eType' eType=[ecore::EClassifier|EString])?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eGenericType' eGenericType=EGenericType)?
//	'}';
//
//EDataType_Impl returns ecore::EDataType:
//	{ecore::EDataType}
//	'EDataType'
//	name=EString
//	'{'
//		('instanceClassName' instanceClassName=EString)?
//		('instanceTypeName' instanceTypeName=EString)?
//		('serializable' serializable=EBoolean)?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
//	'}';
//
//EEnum returns ecore::EEnum:
//	{ecore::EEnum}
//	'EEnum'
//	name=EString
//	'{'
//		('instanceClassName' instanceClassName=EString)?
//		('instanceTypeName' instanceTypeName=EString)?
//		('serializable' serializable=EBoolean)?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
//		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
//	'}';
//
//EEnumLiteral returns ecore::EEnumLiteral:
//	{ecore::EEnumLiteral}
//	'EEnumLiteral'
//	name=EString
//	'{'
//		('value' value=EInt)?
//		('literal' literal=EString)?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//	'}';
//
//EAttribute returns ecore::EAttribute:
//	{ecore::EAttribute}
//	(volatile?='volatile')?
//	(transient?='transient')?
//	(unsettable?='unsettable')?
//	(derived?='derived')?
//	(iD?='iD')?
//	'EAttribute'
//	name=EString
//	'{'
//		('ordered' ordered=EBoolean)?
//		('unique' unique=EBoolean)?
//		('lowerBound' lowerBound=EInt)?
//		('upperBound' upperBound=EInt)?
//		('changeable' changeable=EBoolean)?
//		('defaultValueLiteral' defaultValueLiteral=EString)?
//		('eType' eType=[ecore::EClassifier|EString])?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eGenericType' eGenericType=EGenericType)?
//	'}';
//
//EReference returns ecore::EReference:
//	{ecore::EReference}
//	(volatile?='volatile')?
//	(transient?='transient')?
//	(unsettable?='unsettable')?
//	(derived?='derived')?
//	(containment?='containment')?
//	'EReference'
//	name=EString
//	'{'
//		('ordered' ordered=EBoolean)?
//		('unique' unique=EBoolean)?
//		('lowerBound' lowerBound=EInt)?
//		('upperBound' upperBound=EInt)?
//		('changeable' changeable=EBoolean)?
//		('defaultValueLiteral' defaultValueLiteral=EString)?
//		('resolveProxies' resolveProxies=EBoolean)?
//		('eType' eType=[ecore::EClassifier|EString])?
//		('eOpposite' eOpposite=[ecore::EReference|EString])?
//		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
//		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
//		('eGenericType' eGenericType=EGenericType)?
//	'}';
//
//
//LoopOperation returns quope::LoopOperation:
//	{quope::LoopOperation}
//	'LoopOperation'
//	name=EString
//	'{'
//		('allowsFixedControlQubits' allowsFixedControlQubits=EBooleanObject)?
//		('allowsFixedTargetQubits' allowsFixedTargetQubits=EBooleanObject)?
//		('allowsControlQubitsIterationType' allowsControlQubitsIterationType=EBooleanObject)?
//		('allowsTargetQubitsIterationType' allowsTargetQubitsIterationType=EBooleanObject)?
//		('allowsControlQubitsBlockSize' allowsControlQubitsBlockSize=EBooleanObject)?
//		('allowsTargetQubitsBlockSize' allowsTargetQubitsBlockSize=EBooleanObject)?
//		('allowsIncrementControlQubits' allowsIncrementControlQubits=EBooleanObject)?
//		('allowsIncrementTargetQubits' allowsIncrementTargetQubits=EBooleanObject)?
//		('allowsIterations' allowsIterations=EBooleanObject)?
//	'}';

enum ITERATION_TYPE returns ITERATION_TYPE:
				NONE = 'NONE' | SHIFT = 'SHIFT' | CHANGE_BLOCK = 'CHANGE_BLOCK';
