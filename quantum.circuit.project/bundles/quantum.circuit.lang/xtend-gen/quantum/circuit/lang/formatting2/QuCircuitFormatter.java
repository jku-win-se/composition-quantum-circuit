/**
 * generated by Xtext 2.26.0
 */
package quantum.circuit.lang.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import quantum.circuit.lang.services.QuCircuitGrammarAccess;
import qucircuit.ClassicRegister;
import qucircuit.Layer;
import qucircuit.QuantumCircuit;
import qucircuit.QuantumRegister;

@SuppressWarnings("all")
public class QuCircuitFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private QuCircuitGrammarAccess _quCircuitGrammarAccess;
  
  protected void _format(final QuantumCircuit quantumCircuit, @Extension final IFormattableDocument document) {
    EList<QuantumRegister> _quantumRegisters = quantumCircuit.getQuantumRegisters();
    for (final QuantumRegister quantumRegister : _quantumRegisters) {
      document.<QuantumRegister>format(quantumRegister);
    }
    EList<ClassicRegister> _classicRegisters = quantumCircuit.getClassicRegisters();
    for (final ClassicRegister classicRegister : _classicRegisters) {
      document.<ClassicRegister>format(classicRegister);
    }
    EList<Layer> _layers = quantumCircuit.getLayers();
    for (final Layer layer : _layers) {
      document.<Layer>format(layer);
    }
  }
  
  public void format(final Object quantumCircuit, final IFormattableDocument document) {
    if (quantumCircuit instanceof XtextResource) {
      _format((XtextResource)quantumCircuit, document);
      return;
    } else if (quantumCircuit instanceof QuantumCircuit) {
      _format((QuantumCircuit)quantumCircuit, document);
      return;
    } else if (quantumCircuit instanceof EObject) {
      _format((EObject)quantumCircuit, document);
      return;
    } else if (quantumCircuit == null) {
      _format((Void)null, document);
      return;
    } else if (quantumCircuit != null) {
      _format(quantumCircuit, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(quantumCircuit, document).toString());
    }
  }
}
