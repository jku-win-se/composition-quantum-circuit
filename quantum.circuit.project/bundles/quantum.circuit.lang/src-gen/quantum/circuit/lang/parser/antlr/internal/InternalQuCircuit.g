/*
 * generated by Xtext 2.28.0
 */
grammar InternalQuCircuit;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package quantum.circuit.lang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package quantum.circuit.lang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import quantum.circuit.lang.services.QuCircuitGrammarAccess;

}

@parser::members {

 	private QuCircuitGrammarAccess grammarAccess;

    public InternalQuCircuitParser(TokenStream input, QuCircuitGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "QuantumCircuit";
   	}

   	@Override
   	protected QuCircuitGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQuantumCircuit
entryRuleQuantumCircuit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantumCircuitRule()); }
	iv_ruleQuantumCircuit=ruleQuantumCircuit
	{ $current=$iv_ruleQuantumCircuit.current; }
	EOF;

// Rule QuantumCircuit
ruleQuantumCircuit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='QuantumCircuit'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuantumCircuitAccess().getQuantumCircuitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuantumCircuitAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getQuantumRegistersQuantumRegisterParserRuleCall_3_0());
				}
				lv_quantumRegisters_3_0=ruleQuantumRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					add(
						$current,
						"quantumRegisters",
						lv_quantumRegisters_3_0,
						"quantum.circuit.lang.QuCircuit.QuantumRegister");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getQuantumRegistersQuantumRegisterParserRuleCall_4_0());
				}
				lv_quantumRegisters_4_0=ruleQuantumRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					add(
						$current,
						"quantumRegisters",
						lv_quantumRegisters_4_0,
						"quantum.circuit.lang.QuCircuit.QuantumRegister");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getClassicRegistersClassicRegisterParserRuleCall_5_0());
				}
				lv_classicRegisters_5_0=ruleClassicRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					add(
						$current,
						"classicRegisters",
						lv_classicRegisters_5_0,
						"quantum.circuit.lang.QuCircuit.ClassicRegister");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getLayersLayerParserRuleCall_6_0());
				}
				lv_layers_6_0=ruleLayer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					add(
						$current,
						"layers",
						lv_layers_6_0,
						"quantum.circuit.lang.QuCircuit.Layer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumCircuitAccess().getLayersLayerParserRuleCall_7_0());
				}
				lv_layers_7_0=ruleLayer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumCircuitRule());
					}
					add(
						$current,
						"layers",
						lv_layers_7_0,
						"quantum.circuit.lang.QuCircuit.Layer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getQuantumCircuitAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleQuantumRegister
entryRuleQuantumRegister returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantumRegisterRule()); }
	iv_ruleQuantumRegister=ruleQuantumRegister
	{ $current=$iv_ruleQuantumRegister.current; }
	EOF;

// Rule QuantumRegister
ruleQuantumRegister returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuantumRegisterAccess().getQuantumRegisterAction_0(),
					$current);
			}
		)
		otherlv_1='QuantumRegister'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuantumRegisterAccess().getQuantumRegisterKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantumRegisterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantumRegisterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuantumRegisterAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='NumberOfQubits'
			{
				newLeafNode(otherlv_4, grammarAccess.getQuantumRegisterAccess().getNumberOfQubitsKeyword_4_0());
			}
			(
				(
					lv_numberOfQubits_5_0=RULE_INT
					{
						newLeafNode(lv_numberOfQubits_5_0, grammarAccess.getQuantumRegisterAccess().getNumberOfQubitsINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantumRegisterRule());
						}
						setWithLastConsumed(
							$current,
							"numberOfQubits",
							lv_numberOfQubits_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getQuantumRegisterAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleClassicRegister
entryRuleClassicRegister returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassicRegisterRule()); }
	iv_ruleClassicRegister=ruleClassicRegister
	{ $current=$iv_ruleClassicRegister.current; }
	EOF;

// Rule ClassicRegister
ruleClassicRegister returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClassicRegisterAccess().getClassicRegisterAction_0(),
					$current);
			}
		)
		otherlv_1='ClassicRegister'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassicRegisterAccess().getClassicRegisterKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassicRegisterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassicRegisterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getClassicRegisterAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='NumberOfBits'
			{
				newLeafNode(otherlv_4, grammarAccess.getClassicRegisterAccess().getNumberOfBitsKeyword_4_0());
			}
			(
				(
					lv_numberOfBits_5_0=RULE_INT
					{
						newLeafNode(lv_numberOfBits_5_0, grammarAccess.getClassicRegisterAccess().getNumberOfBitsINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassicRegisterRule());
						}
						setWithLastConsumed(
							$current,
							"numberOfBits",
							lv_numberOfBits_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getClassicRegisterAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleLayer
entryRuleLayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayerRule()); }
	iv_ruleLayer=ruleLayer
	{ $current=$iv_ruleLayer.current; }
	EOF;

// Rule Layer
ruleLayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLayerAccess().getLayerAction_0(),
					$current);
			}
		)
		otherlv_1='Layer'
		{
			newLeafNode(otherlv_1, grammarAccess.getLayerAccess().getLayerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLayerAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLayerRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLayerAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLayerAccess().getQuantumOperationsQuantumOperationParserRuleCall_4_0());
				}
				lv_quantumOperations_4_0=ruleQuantumOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLayerRule());
					}
					add(
						$current,
						"quantumOperations",
						lv_quantumOperations_4_0,
						"quantum.circuit.lang.QuCircuit.QuantumOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getLayerAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLayerAccess().getQuantumOperationsQuantumOperationParserRuleCall_5_1_0());
					}
					lv_quantumOperations_6_0=ruleQuantumOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLayerRule());
						}
						add(
							$current,
							"quantumOperations",
							lv_quantumOperations_6_0,
							"quantum.circuit.lang.QuCircuit.QuantumOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getLayerAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleQuantumOperation
entryRuleQuantumOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantumOperationRule()); }
	iv_ruleQuantumOperation=ruleQuantumOperation
	{ $current=$iv_ruleQuantumOperation.current; }
	EOF;

// Rule QuantumOperation
ruleQuantumOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQuantumOperationAccess().getStatePreparationParserRuleCall_0());
		}
		this_StatePreparation_0=ruleStatePreparation
		{
			$current = $this_StatePreparation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuantumOperationAccess().getElementaryQuantumGateParserRuleCall_1());
		}
		this_ElementaryQuantumGate_1=ruleElementaryQuantumGate
		{
			$current = $this_ElementaryQuantumGate_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuantumOperationAccess().getMeasurementParserRuleCall_2());
		}
		this_Measurement_2=ruleMeasurement
		{
			$current = $this_Measurement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuantumOperationAccess().getCompositeQuantumGateParserRuleCall_3());
		}
		this_CompositeQuantumGate_3=ruleCompositeQuantumGate
		{
			$current = $this_CompositeQuantumGate_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuantumOperationAccess().getLoopParserRuleCall_4());
		}
		this_Loop_4=ruleLoop
		{
			$current = $this_Loop_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatePreparation
entryRuleStatePreparation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatePreparationRule()); }
	iv_ruleStatePreparation=ruleStatePreparation
	{ $current=$iv_ruleStatePreparation.current; }
	EOF;

// Rule StatePreparation
ruleStatePreparation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='StatePreparation'
		{
			newLeafNode(otherlv_0, grammarAccess.getStatePreparationAccess().getStatePreparationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatePreparationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatePreparationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStatePreparationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='operation'
		{
			newLeafNode(otherlv_3, grammarAccess.getStatePreparationAccess().getOperationKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatePreparationAccess().getOperationsOperationParserRuleCall_4_0());
				}
				lv_operations_4_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatePreparationRule());
					}
					add(
						$current,
						"operations",
						lv_operations_4_0,
						"quantum.circuit.lang.QuCircuit.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getStatePreparationAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatePreparationAccess().getOperationsOperationParserRuleCall_5_1_0());
					}
					lv_operations_6_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatePreparationRule());
						}
						add(
							$current,
							"operations",
							lv_operations_6_0,
							"quantum.circuit.lang.QuCircuit.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='targetQubits'
		{
			newLeafNode(otherlv_7, grammarAccess.getStatePreparationAccess().getTargetQubitsKeyword_6());
		}
		otherlv_8='['
		{
			newLeafNode(otherlv_8, grammarAccess.getStatePreparationAccess().getLeftSquareBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatePreparationAccess().getTargetQubitsSelectorParserRuleCall_8_0());
				}
				lv_targetQubits_9_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatePreparationRule());
					}
					add(
						$current,
						"targetQubits",
						lv_targetQubits_9_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getStatePreparationAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatePreparationAccess().getTargetQubitsSelectorParserRuleCall_9_1_0());
					}
					lv_targetQubits_11_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatePreparationRule());
						}
						add(
							$current,
							"targetQubits",
							lv_targetQubits_11_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12=']'
		{
			newLeafNode(otherlv_12, grammarAccess.getStatePreparationAccess().getRightSquareBracketKeyword_10());
		}
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getStatePreparationAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleElementaryQuantumGate
entryRuleElementaryQuantumGate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementaryQuantumGateRule()); }
	iv_ruleElementaryQuantumGate=ruleElementaryQuantumGate
	{ $current=$iv_ruleElementaryQuantumGate.current; }
	EOF;

// Rule ElementaryQuantumGate
ruleElementaryQuantumGate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ElementaryQuantumGate'
		{
			newLeafNode(otherlv_0, grammarAccess.getElementaryQuantumGateAccess().getElementaryQuantumGateKeyword_0());
		}
		(
			(
				lv_inverseForm_1_0='inverseForm'
				{
					newLeafNode(lv_inverseForm_1_0, grammarAccess.getElementaryQuantumGateAccess().getInverseFormInverseFormKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementaryQuantumGateRule());
					}
					setWithLastConsumed($current, "inverseForm", lv_inverseForm_1_0 != null, "inverseForm");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getElementaryQuantumGateAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='operation'
			{
				newLeafNode(otherlv_4, grammarAccess.getElementaryQuantumGateAccess().getOperationKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getOperationsOperationParserRuleCall_4_1_0());
					}
					lv_operations_5_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
						}
						add(
							$current,
							"operations",
							lv_operations_5_0,
							"quantum.circuit.lang.QuCircuit.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='targetQubits'
		{
			newLeafNode(otherlv_6, grammarAccess.getElementaryQuantumGateAccess().getTargetQubitsKeyword_5());
		}
		otherlv_7='['
		{
			newLeafNode(otherlv_7, grammarAccess.getElementaryQuantumGateAccess().getLeftSquareBracketKeyword_6());
		}
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getElementaryQuantumGateAccess().getLeftParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getTargetQubitsSelectorParserRuleCall_8_0());
				}
				lv_targetQubits_9_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
					}
					add(
						$current,
						"targetQubits",
						lv_targetQubits_9_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getElementaryQuantumGateAccess().getRightParenthesisKeyword_9());
		}
		(
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getElementaryQuantumGateAccess().getCommaKeyword_10_0());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getElementaryQuantumGateAccess().getLeftParenthesisKeyword_10_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getTargetQubitsSelectorParserRuleCall_10_2_0());
					}
					lv_targetQubits_13_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
						}
						add(
							$current,
							"targetQubits",
							lv_targetQubits_13_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getElementaryQuantumGateAccess().getRightParenthesisKeyword_10_3());
			}
		)*
		otherlv_15=']'
		{
			newLeafNode(otherlv_15, grammarAccess.getElementaryQuantumGateAccess().getRightSquareBracketKeyword_11());
		}
		(
			otherlv_16='controlQubits'
			{
				newLeafNode(otherlv_16, grammarAccess.getElementaryQuantumGateAccess().getControlQubitsKeyword_12_0());
			}
			otherlv_17='['
			{
				newLeafNode(otherlv_17, grammarAccess.getElementaryQuantumGateAccess().getLeftSquareBracketKeyword_12_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getControlQubitsSelectorParserRuleCall_12_2_0());
					}
					lv_controlQubits_18_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
						}
						add(
							$current,
							"controlQubits",
							lv_controlQubits_18_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_19=','
				{
					newLeafNode(otherlv_19, grammarAccess.getElementaryQuantumGateAccess().getCommaKeyword_12_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getControlQubitsSelectorParserRuleCall_12_3_1_0());
						}
						lv_controlQubits_20_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
							}
							add(
								$current,
								"controlQubits",
								lv_controlQubits_20_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_21=']'
			{
				newLeafNode(otherlv_21, grammarAccess.getElementaryQuantumGateAccess().getRightSquareBracketKeyword_12_4());
			}
		)*
		(
			otherlv_22='angleParameter'
			{
				newLeafNode(otherlv_22, grammarAccess.getElementaryQuantumGateAccess().getAngleParameterKeyword_13_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementaryQuantumGateAccess().getAngleParameterAngleParameterParserRuleCall_13_1_0());
					}
					lv_angleParameter_23_0=ruleAngleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementaryQuantumGateRule());
						}
						set(
							$current,
							"angleParameter",
							lv_angleParameter_23_0,
							"quantum.circuit.lang.QuCircuit.AngleParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_24='}'
		{
			newLeafNode(otherlv_24, grammarAccess.getElementaryQuantumGateAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRuleAngleParameter
entryRuleAngleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngleParameterRule()); }
	iv_ruleAngleParameter=ruleAngleParameter
	{ $current=$iv_ruleAngleParameter.current; }
	EOF;

// Rule AngleParameter
ruleAngleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAngleParameterAccess().getAngleParameterAction_0(),
					$current);
			}
		)
		otherlv_1='AngleParameter'
		{
			newLeafNode(otherlv_1, grammarAccess.getAngleParameterAccess().getAngleParameterKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAngleParameterAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='theta'
			{
				newLeafNode(otherlv_3, grammarAccess.getAngleParameterAccess().getThetaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAngleParameterAccess().getThetaEDoubleObjectParserRuleCall_3_1_0());
					}
					lv_theta_4_0=ruleEDoubleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAngleParameterRule());
						}
						set(
							$current,
							"theta",
							lv_theta_4_0,
							"quantum.circuit.lang.QuCircuit.EDoubleObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='phi'
			{
				newLeafNode(otherlv_5, grammarAccess.getAngleParameterAccess().getPhiKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAngleParameterAccess().getPhiEDoubleObjectParserRuleCall_4_1_0());
					}
					lv_phi_6_0=ruleEDoubleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAngleParameterRule());
						}
						set(
							$current,
							"phi",
							lv_phi_6_0,
							"quantum.circuit.lang.QuCircuit.EDoubleObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='lambda'
			{
				newLeafNode(otherlv_7, grammarAccess.getAngleParameterAccess().getLambdaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAngleParameterAccess().getLambdaEDoubleObjectParserRuleCall_5_1_0());
					}
					lv_lambda_8_0=ruleEDoubleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAngleParameterRule());
						}
						set(
							$current,
							"lambda",
							lv_lambda_8_0,
							"quantum.circuit.lang.QuCircuit.EDoubleObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getAngleParameterAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMeasurement
entryRuleMeasurement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeasurementRule()); }
	iv_ruleMeasurement=ruleMeasurement
	{ $current=$iv_ruleMeasurement.current; }
	EOF;

// Rule Measurement
ruleMeasurement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Measurement'
		{
			newLeafNode(otherlv_0, grammarAccess.getMeasurementAccess().getMeasurementKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeasurementAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeasurementRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMeasurementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='operation'
			{
				newLeafNode(otherlv_3, grammarAccess.getMeasurementAccess().getOperationKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMeasurementAccess().getOperationsOperationParserRuleCall_3_1_0());
					}
					lv_operations_4_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMeasurementRule());
						}
						add(
							$current,
							"operations",
							lv_operations_4_0,
							"quantum.circuit.lang.QuCircuit.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='targetQubits'
		{
			newLeafNode(otherlv_5, grammarAccess.getMeasurementAccess().getTargetQubitsKeyword_4());
		}
		otherlv_6='['
		{
			newLeafNode(otherlv_6, grammarAccess.getMeasurementAccess().getLeftSquareBracketKeyword_5());
		}
		otherlv_7='('
		{
			newLeafNode(otherlv_7, grammarAccess.getMeasurementAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeasurementAccess().getTargetQubitsSelectorParserRuleCall_7_0());
				}
				lv_targetQubits_8_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeasurementRule());
					}
					add(
						$current,
						"targetQubits",
						lv_targetQubits_8_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getMeasurementAccess().getRightParenthesisKeyword_8());
		}
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getMeasurementAccess().getCommaKeyword_9_0());
			}
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getMeasurementAccess().getLeftParenthesisKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMeasurementAccess().getTargetQubitsSelectorParserRuleCall_9_2_0());
					}
					lv_targetQubits_12_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMeasurementRule());
						}
						add(
							$current,
							"targetQubits",
							lv_targetQubits_12_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13=')'
			{
				newLeafNode(otherlv_13, grammarAccess.getMeasurementAccess().getRightParenthesisKeyword_9_3());
			}
		)*
		otherlv_14=']'
		{
			newLeafNode(otherlv_14, grammarAccess.getMeasurementAccess().getRightSquareBracketKeyword_10());
		}
		otherlv_15='classicBits'
		{
			newLeafNode(otherlv_15, grammarAccess.getMeasurementAccess().getClassicBitsKeyword_11());
		}
		otherlv_16='['
		{
			newLeafNode(otherlv_16, grammarAccess.getMeasurementAccess().getLeftSquareBracketKeyword_12());
		}
		otherlv_17='('
		{
			newLeafNode(otherlv_17, grammarAccess.getMeasurementAccess().getLeftParenthesisKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeasurementAccess().getClassicBitsSelectorParserRuleCall_14_0());
				}
				lv_classicBits_18_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeasurementRule());
					}
					add(
						$current,
						"classicBits",
						lv_classicBits_18_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_19=')'
		{
			newLeafNode(otherlv_19, grammarAccess.getMeasurementAccess().getRightParenthesisKeyword_15());
		}
		(
			otherlv_20=','
			{
				newLeafNode(otherlv_20, grammarAccess.getMeasurementAccess().getCommaKeyword_16_0());
			}
			otherlv_21='('
			{
				newLeafNode(otherlv_21, grammarAccess.getMeasurementAccess().getLeftParenthesisKeyword_16_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMeasurementAccess().getClassicBitsSelectorParserRuleCall_16_2_0());
					}
					lv_classicBits_22_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMeasurementRule());
						}
						add(
							$current,
							"classicBits",
							lv_classicBits_22_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_23=')'
			{
				newLeafNode(otherlv_23, grammarAccess.getMeasurementAccess().getRightParenthesisKeyword_16_3());
			}
		)*
		otherlv_24=']'
		{
			newLeafNode(otherlv_24, grammarAccess.getMeasurementAccess().getRightSquareBracketKeyword_17());
		}
		otherlv_25='}'
		{
			newLeafNode(otherlv_25, grammarAccess.getMeasurementAccess().getRightCurlyBracketKeyword_18());
		}
	)
;

// Entry rule entryRuleCompositeQuantumGate
entryRuleCompositeQuantumGate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeQuantumGateRule()); }
	iv_ruleCompositeQuantumGate=ruleCompositeQuantumGate
	{ $current=$iv_ruleCompositeQuantumGate.current; }
	EOF;

// Rule CompositeQuantumGate
ruleCompositeQuantumGate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CompositeQuantumGate'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompositeQuantumGateAccess().getCompositeQuantumGateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompositeQuantumGateAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_inverseForm_3_0='inverseForm'
				{
					newLeafNode(lv_inverseForm_3_0, grammarAccess.getCompositeQuantumGateAccess().getInverseFormInverseFormKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositeQuantumGateRule());
					}
					setWithLastConsumed($current, "inverseForm", lv_inverseForm_3_0 != null, "inverseForm");
				}
			)
		)?
		(
			otherlv_4='operation'
			{
				newLeafNode(otherlv_4, grammarAccess.getCompositeQuantumGateAccess().getOperationKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getOperationsOperationParserRuleCall_4_1_0());
					}
					lv_operations_5_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
						}
						add(
							$current,
							"operations",
							lv_operations_5_0,
							"quantum.circuit.lang.QuCircuit.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='targetQubits'
		{
			newLeafNode(otherlv_6, grammarAccess.getCompositeQuantumGateAccess().getTargetQubitsKeyword_5());
		}
		otherlv_7='['
		{
			newLeafNode(otherlv_7, grammarAccess.getCompositeQuantumGateAccess().getLeftSquareBracketKeyword_6());
		}
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getCompositeQuantumGateAccess().getLeftParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getTargetQubitsSelectorParserRuleCall_8_0());
				}
				lv_targetQubits_9_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
					}
					add(
						$current,
						"targetQubits",
						lv_targetQubits_9_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getCompositeQuantumGateAccess().getRightParenthesisKeyword_9());
		}
		(
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getCompositeQuantumGateAccess().getCommaKeyword_10_0());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getCompositeQuantumGateAccess().getLeftParenthesisKeyword_10_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getTargetQubitsSelectorParserRuleCall_10_2_0());
					}
					lv_targetQubits_13_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
						}
						add(
							$current,
							"targetQubits",
							lv_targetQubits_13_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getCompositeQuantumGateAccess().getRightParenthesisKeyword_10_3());
			}
		)*
		otherlv_15=']'
		{
			newLeafNode(otherlv_15, grammarAccess.getCompositeQuantumGateAccess().getRightSquareBracketKeyword_11());
		}
		(
			otherlv_16='controlQubits'
			{
				newLeafNode(otherlv_16, grammarAccess.getCompositeQuantumGateAccess().getControlQubitsKeyword_12_0());
			}
			otherlv_17='['
			{
				newLeafNode(otherlv_17, grammarAccess.getCompositeQuantumGateAccess().getLeftSquareBracketKeyword_12_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getControlQubitsSelectorParserRuleCall_12_2_0());
					}
					lv_controlQubits_18_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
						}
						add(
							$current,
							"controlQubits",
							lv_controlQubits_18_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_19=','
				{
					newLeafNode(otherlv_19, grammarAccess.getCompositeQuantumGateAccess().getCommaKeyword_12_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCompositeQuantumGateAccess().getControlQubitsSelectorParserRuleCall_12_3_1_0());
						}
						lv_controlQubits_20_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompositeQuantumGateRule());
							}
							add(
								$current,
								"controlQubits",
								lv_controlQubits_20_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_21=']'
			{
				newLeafNode(otherlv_21, grammarAccess.getCompositeQuantumGateAccess().getRightSquareBracketKeyword_12_4());
			}
		)?
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getCompositeQuantumGateAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getLoopKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"quantum.circuit.lang.QuCircuit.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_inverseForm_3_0='inverseForm'
				{
					newLeafNode(lv_inverseForm_3_0, grammarAccess.getLoopAccess().getInverseFormInverseFormKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed($current, "inverseForm", lv_inverseForm_3_0 != null, "inverseForm");
				}
			)
		)?
		(
			(
				lv_incrementBlockTargetQubits_4_0='incrementBlockTargetQubits'
				{
					newLeafNode(lv_incrementBlockTargetQubits_4_0, grammarAccess.getLoopAccess().getIncrementBlockTargetQubitsIncrementBlockTargetQubitsKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed($current, "incrementBlockTargetQubits", lv_incrementBlockTargetQubits_4_0 != null, "incrementBlockTargetQubits");
				}
			)
		)?
		(
			(
				lv_incrementBlockControlQubits_5_0='incrementBlockControlQubits'
				{
					newLeafNode(lv_incrementBlockControlQubits_5_0, grammarAccess.getLoopAccess().getIncrementBlockControlQubitsIncrementBlockControlQubitsKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed($current, "incrementBlockControlQubits", lv_incrementBlockControlQubits_5_0 != null, "incrementBlockControlQubits");
				}
			)
		)?
		(
			otherlv_6='iterations'
			{
				newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getIterationsKeyword_6_0());
			}
			(
				(
					lv_iterations_7_0=RULE_INT
					{
						newLeafNode(lv_iterations_7_0, grammarAccess.getLoopAccess().getIterationsINTTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"iterations",
							lv_iterations_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				lv_incrementTargetQubits_8_0='incrementTargetQubits'
				{
					newLeafNode(lv_incrementTargetQubits_8_0, grammarAccess.getLoopAccess().getIncrementTargetQubitsIncrementTargetQubitsKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed($current, "incrementTargetQubits", lv_incrementTargetQubits_8_0 != null, "incrementTargetQubits");
				}
			)
		)?
		(
			(
				lv_incrementControlQubits_9_0='incrementControlQubits'
				{
					newLeafNode(lv_incrementControlQubits_9_0, grammarAccess.getLoopAccess().getIncrementControlQubitsIncrementControlQubitsKeyword_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed($current, "incrementControlQubits", lv_incrementControlQubits_9_0 != null, "incrementControlQubits");
				}
			)
		)?
		(
			otherlv_10='targetQubitsBlockSize'
			{
				newLeafNode(otherlv_10, grammarAccess.getLoopAccess().getTargetQubitsBlockSizeKeyword_9_0());
			}
			(
				(
					lv_targetQubitsBlockSize_11_0=RULE_INT
					{
						newLeafNode(lv_targetQubitsBlockSize_11_0, grammarAccess.getLoopAccess().getTargetQubitsBlockSizeINTTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"targetQubitsBlockSize",
							lv_targetQubitsBlockSize_11_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_12='controlQubitsBlockSize'
			{
				newLeafNode(otherlv_12, grammarAccess.getLoopAccess().getControlQubitsBlockSizeKeyword_10_0());
			}
			(
				(
					lv_controlQubitsBlockSize_13_0=RULE_INT
					{
						newLeafNode(lv_controlQubitsBlockSize_13_0, grammarAccess.getLoopAccess().getControlQubitsBlockSizeINTTerminalRuleCall_10_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"controlQubitsBlockSize",
							lv_controlQubitsBlockSize_13_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_14='controlQubitsIterationType'
			{
				newLeafNode(otherlv_14, grammarAccess.getLoopAccess().getControlQubitsIterationTypeKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getControlQubitsIterationTypeITERATION_TYPEEnumRuleCall_11_1_0());
					}
					lv_controlQubitsIterationType_15_0=ruleITERATION_TYPE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						set(
							$current,
							"controlQubitsIterationType",
							lv_controlQubitsIterationType_15_0,
							"quantum.circuit.lang.QuCircuit.ITERATION_TYPE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_16='targetQubitsIterationType'
			{
				newLeafNode(otherlv_16, grammarAccess.getLoopAccess().getTargetQubitsIterationTypeKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getTargetQubitsIterationTypeITERATION_TYPEEnumRuleCall_12_1_0());
					}
					lv_targetQubitsIterationType_17_0=ruleITERATION_TYPE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						set(
							$current,
							"targetQubitsIterationType",
							lv_targetQubitsIterationType_17_0,
							"quantum.circuit.lang.QuCircuit.ITERATION_TYPE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_18='incrementBy'
			{
				newLeafNode(otherlv_18, grammarAccess.getLoopAccess().getIncrementByKeyword_13_0());
			}
			(
				(
					lv_incrementBy_19_0=RULE_INT
					{
						newLeafNode(lv_incrementBy_19_0, grammarAccess.getLoopAccess().getIncrementByINTTerminalRuleCall_13_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"incrementBy",
							lv_incrementBy_19_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_20='operations'
			{
				newLeafNode(otherlv_20, grammarAccess.getLoopAccess().getOperationsKeyword_14_0());
			}
			otherlv_21='('
			{
				newLeafNode(otherlv_21, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_14_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getOperationsOperationParserRuleCall_14_2_0());
					}
					lv_operations_22_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"operations",
							lv_operations_22_0,
							"quantum.circuit.lang.QuCircuit.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_23=','
				{
					newLeafNode(otherlv_23, grammarAccess.getLoopAccess().getCommaKeyword_14_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLoopAccess().getOperationsOperationParserRuleCall_14_3_1_0());
						}
						lv_operations_24_0=ruleOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLoopRule());
							}
							add(
								$current,
								"operations",
								lv_operations_24_0,
								"quantum.circuit.lang.QuCircuit.Operation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_25=')'
			{
				newLeafNode(otherlv_25, grammarAccess.getLoopAccess().getRightParenthesisKeyword_14_4());
			}
		)?
		otherlv_26='targetQubits'
		{
			newLeafNode(otherlv_26, grammarAccess.getLoopAccess().getTargetQubitsKeyword_15());
		}
		otherlv_27='['
		{
			newLeafNode(otherlv_27, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_16());
		}
		otherlv_28='('
		{
			newLeafNode(otherlv_28, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_17());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getTargetQubitsSelectorParserRuleCall_18_0());
				}
				lv_targetQubits_29_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					add(
						$current,
						"targetQubits",
						lv_targetQubits_29_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_30=')'
		{
			newLeafNode(otherlv_30, grammarAccess.getLoopAccess().getRightParenthesisKeyword_19());
		}
		(
			otherlv_31=','
			{
				newLeafNode(otherlv_31, grammarAccess.getLoopAccess().getCommaKeyword_20_0());
			}
			otherlv_32='('
			{
				newLeafNode(otherlv_32, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_20_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getTargetQubitsSelectorParserRuleCall_20_2_0());
					}
					lv_targetQubits_33_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"targetQubits",
							lv_targetQubits_33_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_34=')'
			{
				newLeafNode(otherlv_34, grammarAccess.getLoopAccess().getRightParenthesisKeyword_20_3());
			}
		)*
		otherlv_35=']'
		{
			newLeafNode(otherlv_35, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_21());
		}
		(
			otherlv_36='controlQubits'
			{
				newLeafNode(otherlv_36, grammarAccess.getLoopAccess().getControlQubitsKeyword_22_0());
			}
			otherlv_37='['
			{
				newLeafNode(otherlv_37, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_22_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getControlQubitsSelectorParserRuleCall_22_2_0());
					}
					lv_controlQubits_38_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"controlQubits",
							lv_controlQubits_38_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_39=','
				{
					newLeafNode(otherlv_39, grammarAccess.getLoopAccess().getCommaKeyword_22_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLoopAccess().getControlQubitsSelectorParserRuleCall_22_3_1_0());
						}
						lv_controlQubits_40_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLoopRule());
							}
							add(
								$current,
								"controlQubits",
								lv_controlQubits_40_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_41=']'
			{
				newLeafNode(otherlv_41, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_22_4());
			}
		)?
		(
			otherlv_42='fixedControlQubits'
			{
				newLeafNode(otherlv_42, grammarAccess.getLoopAccess().getFixedControlQubitsKeyword_23_0());
			}
			otherlv_43='['
			{
				newLeafNode(otherlv_43, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_23_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getFixedControlQubitsSelectorParserRuleCall_23_2_0());
					}
					lv_fixedControlQubits_44_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"fixedControlQubits",
							lv_fixedControlQubits_44_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_45=','
				{
					newLeafNode(otherlv_45, grammarAccess.getLoopAccess().getCommaKeyword_23_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLoopAccess().getFixedControlQubitsSelectorParserRuleCall_23_3_1_0());
						}
						lv_fixedControlQubits_46_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLoopRule());
							}
							add(
								$current,
								"fixedControlQubits",
								lv_fixedControlQubits_46_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_47=']'
			{
				newLeafNode(otherlv_47, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_23_4());
			}
		)?
		(
			otherlv_48='fixedTargetQubits'
			{
				newLeafNode(otherlv_48, grammarAccess.getLoopAccess().getFixedTargetQubitsKeyword_24_0());
			}
			otherlv_49='['
			{
				newLeafNode(otherlv_49, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_24_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getFixedTargetQubitsSelectorParserRuleCall_24_2_0());
					}
					lv_fixedTargetQubits_50_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"fixedTargetQubits",
							lv_fixedTargetQubits_50_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_51=','
				{
					newLeafNode(otherlv_51, grammarAccess.getLoopAccess().getCommaKeyword_24_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLoopAccess().getFixedTargetQubitsSelectorParserRuleCall_24_3_1_0());
						}
						lv_fixedTargetQubits_52_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLoopRule());
							}
							add(
								$current,
								"fixedTargetQubits",
								lv_fixedTargetQubits_52_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_53=']'
			{
				newLeafNode(otherlv_53, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_24_4());
			}
		)?
		otherlv_54='loop'
		{
			newLeafNode(otherlv_54, grammarAccess.getLoopAccess().getLoopKeyword_25());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLoopAccess().getLoopConcreteLoopOperationCrossReference_26_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_56='loopTargetQubits'
		{
			newLeafNode(otherlv_56, grammarAccess.getLoopAccess().getLoopTargetQubitsKeyword_27());
		}
		otherlv_57='['
		{
			newLeafNode(otherlv_57, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_28());
		}
		otherlv_58='('
		{
			newLeafNode(otherlv_58, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_29());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getLoopTargetQubitsSelectorParserRuleCall_30_0());
				}
				lv_loopTargetQubits_59_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					add(
						$current,
						"loopTargetQubits",
						lv_loopTargetQubits_59_0,
						"quantum.circuit.lang.QuCircuit.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_60=')'
		{
			newLeafNode(otherlv_60, grammarAccess.getLoopAccess().getRightParenthesisKeyword_31());
		}
		(
			otherlv_61=','
			{
				newLeafNode(otherlv_61, grammarAccess.getLoopAccess().getCommaKeyword_32_0());
			}
			otherlv_62='('
			{
				newLeafNode(otherlv_62, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_32_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getLoopTargetQubitsSelectorParserRuleCall_32_2_0());
					}
					lv_loopTargetQubits_63_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"loopTargetQubits",
							lv_loopTargetQubits_63_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_64=')'
			{
				newLeafNode(otherlv_64, grammarAccess.getLoopAccess().getRightParenthesisKeyword_32_3());
			}
		)*
		otherlv_65=']'
		{
			newLeafNode(otherlv_65, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_33());
		}
		(
			otherlv_66='loopControlQubits'
			{
				newLeafNode(otherlv_66, grammarAccess.getLoopAccess().getLoopControlQubitsKeyword_34_0());
			}
			otherlv_67='['
			{
				newLeafNode(otherlv_67, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_34_1());
			}
			otherlv_68='('
			{
				newLeafNode(otherlv_68, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_34_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLoopAccess().getLoopControlQubitsSelectorParserRuleCall_34_3_0());
					}
					lv_loopControlQubits_69_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLoopRule());
						}
						add(
							$current,
							"loopControlQubits",
							lv_loopControlQubits_69_0,
							"quantum.circuit.lang.QuCircuit.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_70=')'
			{
				newLeafNode(otherlv_70, grammarAccess.getLoopAccess().getRightParenthesisKeyword_34_4());
			}
			(
				otherlv_71=','
				{
					newLeafNode(otherlv_71, grammarAccess.getLoopAccess().getCommaKeyword_34_5_0());
				}
				otherlv_72='('
				{
					newLeafNode(otherlv_72, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_34_5_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLoopAccess().getLoopControlQubitsSelectorParserRuleCall_34_5_2_0());
						}
						lv_loopControlQubits_73_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLoopRule());
							}
							add(
								$current,
								"loopControlQubits",
								lv_loopControlQubits_73_0,
								"quantum.circuit.lang.QuCircuit.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_74=')'
				{
					newLeafNode(otherlv_74, grammarAccess.getLoopAccess().getRightParenthesisKeyword_34_5_3());
				}
			)*
			otherlv_75=']'
			{
				newLeafNode(otherlv_75, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_34_6());
			}
		)?
		otherlv_76='}'
		{
			newLeafNode(otherlv_76, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_35());
		}
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getOperationAccess().getOperationConcreteQuantumOperationCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOperationAccess().getQuboQuboCrossReference_1_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getElementSelectorParserRuleCall_0());
		}
		this_ElementSelector_0=ruleElementSelector
		{
			$current = $this_ElementSelector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getRangeSelectorParserRuleCall_1());
		}
		this_RangeSelector_1=ruleRangeSelector
		{
			$current = $this_RangeSelector_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleElementSelector
entryRuleElementSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementSelectorRule()); }
	iv_ruleElementSelector=ruleElementSelector
	{ $current=$iv_ruleElementSelector.current; }
	EOF;

// Rule ElementSelector
ruleElementSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElementSelectorAccess().getElementSelectorAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementSelectorRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getElementSelectorAccess().getRegisterRegisterCrossReference_1_0_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getElementSelectorAccess().getCommaKeyword_1_1());
			}
		)?
		(
			(
				lv_index_3_0=RULE_INT
				{
					newLeafNode(lv_index_3_0, grammarAccess.getElementSelectorAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRangeSelector
entryRuleRangeSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeSelectorRule()); }
	iv_ruleRangeSelector=ruleRangeSelector
	{ $current=$iv_ruleRangeSelector.current; }
	EOF;

// Rule RangeSelector
ruleRangeSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRangeSelectorAccess().getRangeSelectorAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRangeSelectorRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRangeSelectorAccess().getRegisterRegisterCrossReference_1_0_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRangeSelectorAccess().getCommaKeyword_1_1());
			}
		)?
		(
			(
				lv_begin_3_0=RULE_INT
				{
					newLeafNode(lv_begin_3_0, grammarAccess.getRangeSelectorAccess().getBeginINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"begin",
						lv_begin_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='-'
		{
			newLeafNode(otherlv_4, grammarAccess.getRangeSelectorAccess().getHyphenMinusKeyword_3());
		}
		(
			(
				lv_end_5_0=RULE_INT
				{
					newLeafNode(lv_end_5_0, grammarAccess.getRangeSelectorAccess().getEndINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEDoubleObject
entryRuleEDoubleObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleObjectRule()); }
	iv_ruleEDoubleObject=ruleEDoubleObject
	{ $current=$iv_ruleEDoubleObject.current.getText(); }
	EOF;

// Rule EDoubleObject
ruleEDoubleObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleObjectAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleObjectAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleObjectAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleObjectAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleObjectAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleObjectAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleObjectAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleObjectAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Rule ITERATION_TYPE
ruleITERATION_TYPE returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getITERATION_TYPEAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getITERATION_TYPEAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SHIFT'
			{
				$current = grammarAccess.getITERATION_TYPEAccess().getSHIFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getITERATION_TYPEAccess().getSHIFTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CHANGE_BLOCK'
			{
				$current = grammarAccess.getITERATION_TYPEAccess().getCHANGE_BLOCKEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getITERATION_TYPEAccess().getCHANGE_BLOCKEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
