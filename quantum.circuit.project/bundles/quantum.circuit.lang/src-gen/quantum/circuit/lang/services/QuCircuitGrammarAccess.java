/*
 * generated by Xtext 2.26.0
 */
package quantum.circuit.lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QuCircuitGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QuantumCircuitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.QuantumCircuit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantumCircuitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuantumRegistersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuantumRegistersQuantumRegisterParserRuleCall_3_0 = (RuleCall)cQuantumRegistersAssignment_3.eContents().get(0);
		private final Assignment cQuantumRegistersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuantumRegistersQuantumRegisterParserRuleCall_4_0 = (RuleCall)cQuantumRegistersAssignment_4.eContents().get(0);
		private final Assignment cClassicRegistersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassicRegistersClassicRegisterParserRuleCall_5_0 = (RuleCall)cClassicRegistersAssignment_5.eContents().get(0);
		private final Assignment cLayersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayersLayerParserRuleCall_6_0 = (RuleCall)cLayersAssignment_6.eContents().get(0);
		private final Assignment cLayersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLayersLayerParserRuleCall_7_0 = (RuleCall)cLayersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//QuantumCircuit returns QuantumCircuit:
		//    'QuantumCircuit'
		//    name=EString
		//    '{'
		//        quantumRegisters+=QuantumRegister (quantumRegisters+=QuantumRegister)*
		//        (classicRegisters+=ClassicRegister)*
		//        layers+=Layer (layers+=Layer)*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'QuantumCircuit'
		//name=EString
		//'{'
		//    quantumRegisters+=QuantumRegister (quantumRegisters+=QuantumRegister)*
		//    (classicRegisters+=ClassicRegister)*
		//    layers+=Layer (layers+=Layer)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'QuantumCircuit'
		public Keyword getQuantumCircuitKeyword_0() { return cQuantumCircuitKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//quantumRegisters+=QuantumRegister
		public Assignment getQuantumRegistersAssignment_3() { return cQuantumRegistersAssignment_3; }
		
		//QuantumRegister
		public RuleCall getQuantumRegistersQuantumRegisterParserRuleCall_3_0() { return cQuantumRegistersQuantumRegisterParserRuleCall_3_0; }
		
		//(quantumRegisters+=QuantumRegister)*
		public Assignment getQuantumRegistersAssignment_4() { return cQuantumRegistersAssignment_4; }
		
		//QuantumRegister
		public RuleCall getQuantumRegistersQuantumRegisterParserRuleCall_4_0() { return cQuantumRegistersQuantumRegisterParserRuleCall_4_0; }
		
		//(classicRegisters+=ClassicRegister)*
		public Assignment getClassicRegistersAssignment_5() { return cClassicRegistersAssignment_5; }
		
		//ClassicRegister
		public RuleCall getClassicRegistersClassicRegisterParserRuleCall_5_0() { return cClassicRegistersClassicRegisterParserRuleCall_5_0; }
		
		//layers+=Layer
		public Assignment getLayersAssignment_6() { return cLayersAssignment_6; }
		
		//Layer
		public RuleCall getLayersLayerParserRuleCall_6_0() { return cLayersLayerParserRuleCall_6_0; }
		
		//(layers+=Layer)*
		public Assignment getLayersAssignment_7() { return cLayersAssignment_7; }
		
		//Layer
		public RuleCall getLayersLayerParserRuleCall_7_0() { return cLayersLayerParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class QuantumRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.QuantumRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantumRegisterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuantumRegisterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNumberOfQubitsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNumberOfQubitsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNumberOfQubitsINTTerminalRuleCall_4_1_0 = (RuleCall)cNumberOfQubitsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QuantumRegister returns QuantumRegister:
		//    {QuantumRegister}
		//    'QuantumRegister'
		//    name=EString
		//    '{'
		//        ('NumberOfQubits' numberOfQubits=INT)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QuantumRegister}
		//'QuantumRegister'
		//name=EString
		//'{'
		//    ('NumberOfQubits' numberOfQubits=INT)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QuantumRegister}
		public Action getQuantumRegisterAction_0() { return cQuantumRegisterAction_0; }
		
		//'QuantumRegister'
		public Keyword getQuantumRegisterKeyword_1() { return cQuantumRegisterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('NumberOfQubits' numberOfQubits=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'NumberOfQubits'
		public Keyword getNumberOfQubitsKeyword_4_0() { return cNumberOfQubitsKeyword_4_0; }
		
		//numberOfQubits=INT
		public Assignment getNumberOfQubitsAssignment_4_1() { return cNumberOfQubitsAssignment_4_1; }
		
		//INT
		public RuleCall getNumberOfQubitsINTTerminalRuleCall_4_1_0() { return cNumberOfQubitsINTTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClassicRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.ClassicRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassicRegisterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassicRegisterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNumberOfBitsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNumberOfBitsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNumberOfBitsINTTerminalRuleCall_4_1_0 = (RuleCall)cNumberOfBitsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassicRegister returns ClassicRegister:
		//    {ClassicRegister}
		//    'ClassicRegister'
		//    name=EString
		//    '{'
		//        ('NumberOfBits'  numberOfBits=INT)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassicRegister}
		//'ClassicRegister'
		//name=EString
		//'{'
		//    ('NumberOfBits'  numberOfBits=INT)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ClassicRegister}
		public Action getClassicRegisterAction_0() { return cClassicRegisterAction_0; }
		
		//'ClassicRegister'
		public Keyword getClassicRegisterKeyword_1() { return cClassicRegisterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('NumberOfBits'  numberOfBits=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'NumberOfBits'
		public Keyword getNumberOfBitsKeyword_4_0() { return cNumberOfBitsKeyword_4_0; }
		
		//numberOfBits=INT
		public Assignment getNumberOfBitsAssignment_4_1() { return cNumberOfBitsAssignment_4_1; }
		
		//INT
		public RuleCall getNumberOfBitsINTTerminalRuleCall_4_1_0() { return cNumberOfBitsINTTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuantumOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuantumOperationsQuantumOperationParserRuleCall_4_0 = (RuleCall)cQuantumOperationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cQuantumOperationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cQuantumOperationsQuantumOperationParserRuleCall_5_1_0 = (RuleCall)cQuantumOperationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Layer returns Layer:
		//    {Layer}
		//    'Layer'
		//    name=EString
		//    '{'
		//        quantumOperations+=QuantumOperation ( "," quantumOperations+=QuantumOperation)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Layer}
		//'Layer'
		//name=EString
		//'{'
		//    quantumOperations+=QuantumOperation ( "," quantumOperations+=QuantumOperation)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Layer}
		public Action getLayerAction_0() { return cLayerAction_0; }
		
		//'Layer'
		public Keyword getLayerKeyword_1() { return cLayerKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//quantumOperations+=QuantumOperation
		public Assignment getQuantumOperationsAssignment_4() { return cQuantumOperationsAssignment_4; }
		
		//QuantumOperation
		public RuleCall getQuantumOperationsQuantumOperationParserRuleCall_4_0() { return cQuantumOperationsQuantumOperationParserRuleCall_4_0; }
		
		//( "," quantumOperations+=QuantumOperation)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//quantumOperations+=QuantumOperation
		public Assignment getQuantumOperationsAssignment_5_1() { return cQuantumOperationsAssignment_5_1; }
		
		//QuantumOperation
		public RuleCall getQuantumOperationsQuantumOperationParserRuleCall_5_1_0() { return cQuantumOperationsQuantumOperationParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QuantumOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.QuantumOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatePreparationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryQuantumGateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeasurementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompositeQuantumGateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//QuantumOperation returns QuantumOperation:
		//    StatePreparation | ElementaryQuantumGate | Measurement  | CompositeQuantumGate | Loop
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//StatePreparation | ElementaryQuantumGate | Measurement  | CompositeQuantumGate | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StatePreparation
		public RuleCall getStatePreparationParserRuleCall_0() { return cStatePreparationParserRuleCall_0; }
		
		//ElementaryQuantumGate
		public RuleCall getElementaryQuantumGateParserRuleCall_1() { return cElementaryQuantumGateParserRuleCall_1; }
		
		//Measurement
		public RuleCall getMeasurementParserRuleCall_2() { return cMeasurementParserRuleCall_2; }
		
		//CompositeQuantumGate
		public RuleCall getCompositeQuantumGateParserRuleCall_3() { return cCompositeQuantumGateParserRuleCall_3; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_4() { return cLoopParserRuleCall_4; }
	}
	public class StatePreparationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.StatePreparation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatePreparationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOperationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsOperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_5_1_0 = (RuleCall)cOperationsAssignment_5_1.eContents().get(0);
		private final Keyword cTargetQubitsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetQubitsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetQubitsIndexParserRuleCall_8_0 = (RuleCall)cTargetQubitsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTargetQubitsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTargetQubitsIndexParserRuleCall_9_1_0 = (RuleCall)cTargetQubitsAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//StatePreparation returns StatePreparation:
		//    'StatePreparation'
		//    name=EString
		//    '{'
		//        'operation' operations+=Operation ( "," operations+=Operation)*
		//        'targetQubits' '[' targetQubits+=Index ( "," targetQubits+=Index)* ']'
		//        //TODO classic control
		//        //('classicControl' classicControl=ClassicControl)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StatePreparation'
		//name=EString
		//'{'
		//    'operation' operations+=Operation ( "," operations+=Operation)*
		//    'targetQubits' '[' targetQubits+=Index ( "," targetQubits+=Index)* ']'
		//    //TODO classic control
		//    //('classicControl' classicControl=ClassicControl)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StatePreparation'
		public Keyword getStatePreparationKeyword_0() { return cStatePreparationKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'operation'
		public Keyword getOperationKeyword_3() { return cOperationKeyword_3; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_0() { return cOperationsOperationParserRuleCall_4_0; }
		
		//( "," operations+=Operation)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_5_1() { return cOperationsAssignment_5_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_5_1_0() { return cOperationsOperationParserRuleCall_5_1_0; }
		
		//'targetQubits'
		public Keyword getTargetQubitsKeyword_6() { return cTargetQubitsKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_8() { return cTargetQubitsAssignment_8; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_8_0() { return cTargetQubitsIndexParserRuleCall_8_0; }
		
		//( "," targetQubits+=Index)*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_9_1() { return cTargetQubitsAssignment_9_1; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_9_1_0() { return cTargetQubitsIndexParserRuleCall_9_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//    //TODO classic control
		//    //('classicControl' classicControl=ClassicControl)?
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ElementaryQuantumGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.ElementaryQuantumGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementaryQuantumGateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInverseFormAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInverseFormInverseFormKeyword_1_0 = (Keyword)cInverseFormAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOperationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_4_1_0 = (RuleCall)cOperationsAssignment_4_1.eContents().get(0);
		private final Keyword cTargetQubitsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetQubitsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetQubitsIndexParserRuleCall_8_0 = (RuleCall)cTargetQubitsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cTargetQubitsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cTargetQubitsIndexParserRuleCall_10_2_0 = (RuleCall)cTargetQubitsAssignment_10_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cControlQubitsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cControlQubitsAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cControlQubitsIndexParserRuleCall_12_2_0 = (RuleCall)cControlQubitsAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cCommaKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cControlQubitsAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cControlQubitsIndexParserRuleCall_12_3_1_0 = (RuleCall)cControlQubitsAssignment_12_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cAngleParameterKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cAngleParameterAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cAngleParameterAngleParameterParserRuleCall_13_1_0 = (RuleCall)cAngleParameterAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//ElementaryQuantumGate returns ElementaryQuantumGate:
		//    'ElementaryQuantumGate'
		//    (inverseForm?='inverseForm')?
		//    name=EString
		//    '{'
		//        ('operation' operations+=Operation)?
		//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
		//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']')*
		//        //TODO ('classicControl' classicControl=ClassicControl)?
		//        ('angleParameter' angleParameter=AngleParameter)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ElementaryQuantumGate'
		//(inverseForm?='inverseForm')?
		//name=EString
		//'{'
		//    ('operation' operations+=Operation)?
		//    'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
		//    ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']')*
		//    //TODO ('classicControl' classicControl=ClassicControl)?
		//    ('angleParameter' angleParameter=AngleParameter)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ElementaryQuantumGate'
		public Keyword getElementaryQuantumGateKeyword_0() { return cElementaryQuantumGateKeyword_0; }
		
		//(inverseForm?='inverseForm')?
		public Assignment getInverseFormAssignment_1() { return cInverseFormAssignment_1; }
		
		//'inverseForm'
		public Keyword getInverseFormInverseFormKeyword_1_0() { return cInverseFormInverseFormKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('operation' operations+=Operation)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'operation'
		public Keyword getOperationKeyword_4_0() { return cOperationKeyword_4_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_4_1() { return cOperationsAssignment_4_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_1_0() { return cOperationsOperationParserRuleCall_4_1_0; }
		
		//'targetQubits'
		public Keyword getTargetQubitsKeyword_5() { return cTargetQubitsKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_8() { return cTargetQubitsAssignment_8; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_8_0() { return cTargetQubitsIndexParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//( "," '(' targetQubits+=Index ')')*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_10_2() { return cTargetQubitsAssignment_10_2; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_10_2_0() { return cTargetQubitsIndexParserRuleCall_10_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_3() { return cRightParenthesisKeyword_10_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']')*
		public Group getGroup_12() { return cGroup_12; }
		
		//'controlQubits'
		public Keyword getControlQubitsKeyword_12_0() { return cControlQubitsKeyword_12_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_12_1() { return cLeftSquareBracketKeyword_12_1; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_12_2() { return cControlQubitsAssignment_12_2; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_12_2_0() { return cControlQubitsIndexParserRuleCall_12_2_0; }
		
		//( "," controlQubits+=Index)*
		public Group getGroup_12_3() { return cGroup_12_3; }
		
		//","
		public Keyword getCommaKeyword_12_3_0() { return cCommaKeyword_12_3_0; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_12_3_1() { return cControlQubitsAssignment_12_3_1; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_12_3_1_0() { return cControlQubitsIndexParserRuleCall_12_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12_4() { return cRightSquareBracketKeyword_12_4; }
		
		////TODO ('classicControl' classicControl=ClassicControl)?
		//('angleParameter' angleParameter=AngleParameter)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'angleParameter'
		public Keyword getAngleParameterKeyword_13_0() { return cAngleParameterKeyword_13_0; }
		
		//angleParameter=AngleParameter
		public Assignment getAngleParameterAssignment_13_1() { return cAngleParameterAssignment_13_1; }
		
		//AngleParameter
		public RuleCall getAngleParameterAngleParameterParserRuleCall_13_1_0() { return cAngleParameterAngleParameterParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class AngleParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.AngleParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAngleParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAngleParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThetaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThetaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThetaEDoubleObjectParserRuleCall_3_1_0 = (RuleCall)cThetaAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPhiKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPhiAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPhiEDoubleObjectParserRuleCall_4_1_0 = (RuleCall)cPhiAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLambdaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLambdaAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLambdaEDoubleObjectParserRuleCall_5_1_0 = (RuleCall)cLambdaAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AngleParameter returns AngleParameter:
		//    {AngleParameter}
		//    'AngleParameter'
		//    '{'
		//        ('theta' theta=EDoubleObject)?
		//        ('phi' phi=EDoubleObject)?
		//        ('lambda' lambda=EDoubleObject)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AngleParameter}
		//'AngleParameter'
		//'{'
		//    ('theta' theta=EDoubleObject)?
		//    ('phi' phi=EDoubleObject)?
		//    ('lambda' lambda=EDoubleObject)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{AngleParameter}
		public Action getAngleParameterAction_0() { return cAngleParameterAction_0; }
		
		//'AngleParameter'
		public Keyword getAngleParameterKeyword_1() { return cAngleParameterKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('theta' theta=EDoubleObject)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'theta'
		public Keyword getThetaKeyword_3_0() { return cThetaKeyword_3_0; }
		
		//theta=EDoubleObject
		public Assignment getThetaAssignment_3_1() { return cThetaAssignment_3_1; }
		
		//EDoubleObject
		public RuleCall getThetaEDoubleObjectParserRuleCall_3_1_0() { return cThetaEDoubleObjectParserRuleCall_3_1_0; }
		
		//('phi' phi=EDoubleObject)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'phi'
		public Keyword getPhiKeyword_4_0() { return cPhiKeyword_4_0; }
		
		//phi=EDoubleObject
		public Assignment getPhiAssignment_4_1() { return cPhiAssignment_4_1; }
		
		//EDoubleObject
		public RuleCall getPhiEDoubleObjectParserRuleCall_4_1_0() { return cPhiEDoubleObjectParserRuleCall_4_1_0; }
		
		//('lambda' lambda=EDoubleObject)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'lambda'
		public Keyword getLambdaKeyword_5_0() { return cLambdaKeyword_5_0; }
		
		//lambda=EDoubleObject
		public Assignment getLambdaAssignment_5_1() { return cLambdaAssignment_5_1; }
		
		//EDoubleObject
		public RuleCall getLambdaEDoubleObjectParserRuleCall_5_1_0() { return cLambdaEDoubleObjectParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.Measurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasurementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_3_1_0 = (RuleCall)cOperationsAssignment_3_1.eContents().get(0);
		private final Keyword cTargetQubitsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetQubitsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetQubitsIndexParserRuleCall_7_0 = (RuleCall)cTargetQubitsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cTargetQubitsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cTargetQubitsIndexParserRuleCall_9_2_0 = (RuleCall)cTargetQubitsAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cClassicBitsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cClassicBitsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cClassicBitsIndexParserRuleCall_14_0 = (RuleCall)cClassicBitsAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cCommaKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cClassicBitsAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cClassicBitsIndexParserRuleCall_16_2_0 = (RuleCall)cClassicBitsAssignment_16_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Measurement returns Measurement:
		//    'Measurement'
		//    name=EString
		//    '{'
		//        ('operation' operations+=Operation)?
		//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
		//        'classicBits' '[' '(' classicBits+=Index  ')' ( "," '(' classicBits+=Index ')')* ']'
		//        //TODO ('classicControl' classicControl=ClassicControl)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Measurement'
		//name=EString
		//'{'
		//    ('operation' operations+=Operation)?
		//    'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
		//    'classicBits' '[' '(' classicBits+=Index  ')' ( "," '(' classicBits+=Index ')')* ']'
		//    //TODO ('classicControl' classicControl=ClassicControl)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Measurement'
		public Keyword getMeasurementKeyword_0() { return cMeasurementKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('operation' operations+=Operation)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operation'
		public Keyword getOperationKeyword_3_0() { return cOperationKeyword_3_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_3_1() { return cOperationsAssignment_3_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_3_1_0() { return cOperationsOperationParserRuleCall_3_1_0; }
		
		//'targetQubits'
		public Keyword getTargetQubitsKeyword_4() { return cTargetQubitsKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_7() { return cTargetQubitsAssignment_7; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_7_0() { return cTargetQubitsIndexParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//( "," '(' targetQubits+=Index ')')*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_9_2() { return cTargetQubitsAssignment_9_2; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_9_2_0() { return cTargetQubitsIndexParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//'classicBits'
		public Keyword getClassicBitsKeyword_11() { return cClassicBitsKeyword_11; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_12() { return cLeftSquareBracketKeyword_12; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13() { return cLeftParenthesisKeyword_13; }
		
		//classicBits+=Index
		public Assignment getClassicBitsAssignment_14() { return cClassicBitsAssignment_14; }
		
		//Index
		public RuleCall getClassicBitsIndexParserRuleCall_14_0() { return cClassicBitsIndexParserRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//( "," '(' classicBits+=Index ')')*
		public Group getGroup_16() { return cGroup_16; }
		
		//","
		public Keyword getCommaKeyword_16_0() { return cCommaKeyword_16_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_16_1() { return cLeftParenthesisKeyword_16_1; }
		
		//classicBits+=Index
		public Assignment getClassicBitsAssignment_16_2() { return cClassicBitsAssignment_16_2; }
		
		//Index
		public RuleCall getClassicBitsIndexParserRuleCall_16_2_0() { return cClassicBitsIndexParserRuleCall_16_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16_3() { return cRightParenthesisKeyword_16_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_17() { return cRightSquareBracketKeyword_17; }
		
		//    //TODO ('classicControl' classicControl=ClassicControl)?
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class CompositeQuantumGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.CompositeQuantumGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeQuantumGateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInverseFormAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInverseFormInverseFormKeyword_3_0 = (Keyword)cInverseFormAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOperationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_4_1_0 = (RuleCall)cOperationsAssignment_4_1.eContents().get(0);
		private final Keyword cTargetQubitsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetQubitsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetQubitsIndexParserRuleCall_8_0 = (RuleCall)cTargetQubitsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cTargetQubitsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cTargetQubitsIndexParserRuleCall_10_2_0 = (RuleCall)cTargetQubitsAssignment_10_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cControlQubitsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cControlQubitsAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cControlQubitsIndexParserRuleCall_12_2_0 = (RuleCall)cControlQubitsAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cCommaKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cControlQubitsAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cControlQubitsIndexParserRuleCall_12_3_1_0 = (RuleCall)cControlQubitsAssignment_12_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//CompositeQuantumGate returns CompositeQuantumGate:
		//    'CompositeQuantumGate'
		//    name=EString
		//    '{'
		//        (inverseForm?='inverseForm')?
		//        ('operation' operations+=Operation)?
		//        'targetQubits' '[' '(' targetQubits+=Index ')' ( ","  '(' targetQubits+=Index ')' )* ']'
		//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		//        //TODO ('classicControl' classicControl=ClassicControl)?
		//        //TODO ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CompositeQuantumGate'
		//name=EString
		//'{'
		//    (inverseForm?='inverseForm')?
		//    ('operation' operations+=Operation)?
		//    'targetQubits' '[' '(' targetQubits+=Index ')' ( ","  '(' targetQubits+=Index ')' )* ']'
		//    ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		//    //TODO ('classicControl' classicControl=ClassicControl)?
		//    //TODO ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CompositeQuantumGate'
		public Keyword getCompositeQuantumGateKeyword_0() { return cCompositeQuantumGateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(inverseForm?='inverseForm')?
		public Assignment getInverseFormAssignment_3() { return cInverseFormAssignment_3; }
		
		//'inverseForm'
		public Keyword getInverseFormInverseFormKeyword_3_0() { return cInverseFormInverseFormKeyword_3_0; }
		
		//('operation' operations+=Operation)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'operation'
		public Keyword getOperationKeyword_4_0() { return cOperationKeyword_4_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_4_1() { return cOperationsAssignment_4_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_1_0() { return cOperationsOperationParserRuleCall_4_1_0; }
		
		//'targetQubits'
		public Keyword getTargetQubitsKeyword_5() { return cTargetQubitsKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_8() { return cTargetQubitsAssignment_8; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_8_0() { return cTargetQubitsIndexParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//( ","  '(' targetQubits+=Index ')' )*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_10_2() { return cTargetQubitsAssignment_10_2; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_10_2_0() { return cTargetQubitsIndexParserRuleCall_10_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_3() { return cRightParenthesisKeyword_10_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		public Group getGroup_12() { return cGroup_12; }
		
		//'controlQubits'
		public Keyword getControlQubitsKeyword_12_0() { return cControlQubitsKeyword_12_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_12_1() { return cLeftSquareBracketKeyword_12_1; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_12_2() { return cControlQubitsAssignment_12_2; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_12_2_0() { return cControlQubitsIndexParserRuleCall_12_2_0; }
		
		//( "," controlQubits+=Index)*
		public Group getGroup_12_3() { return cGroup_12_3; }
		
		//","
		public Keyword getCommaKeyword_12_3_0() { return cCommaKeyword_12_3_0; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_12_3_1() { return cControlQubitsAssignment_12_3_1; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_12_3_1_0() { return cControlQubitsIndexParserRuleCall_12_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12_4() { return cRightSquareBracketKeyword_12_4; }
		
		//    //TODO ('classicControl' classicControl=ClassicControl)?
		//    //TODO ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInverseFormAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInverseFormInverseFormKeyword_3_0 = (Keyword)cInverseFormAssignment_3.eContents().get(0);
		private final Assignment cIncrementBlockTargetQubitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIncrementBlockTargetQubitsIncrementBlockTargetQubitsKeyword_4_0 = (Keyword)cIncrementBlockTargetQubitsAssignment_4.eContents().get(0);
		private final Assignment cIncrementBlockControlQubitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIncrementBlockControlQubitsIncrementBlockControlQubitsKeyword_5_0 = (Keyword)cIncrementBlockControlQubitsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIterationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIterationsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIterationsINTTerminalRuleCall_6_1_0 = (RuleCall)cIterationsAssignment_6_1.eContents().get(0);
		private final Assignment cIncrementTargetQubitsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cIncrementTargetQubitsIncrementTargetQubitsKeyword_7_0 = (Keyword)cIncrementTargetQubitsAssignment_7.eContents().get(0);
		private final Assignment cIncrementControlQubitsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cIncrementControlQubitsIncrementControlQubitsKeyword_8_0 = (Keyword)cIncrementControlQubitsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cTargetQubitsBlockSizeKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTargetQubitsBlockSizeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTargetQubitsBlockSizeINTTerminalRuleCall_9_1_0 = (RuleCall)cTargetQubitsBlockSizeAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cControlQubitsBlockSizeKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cControlQubitsBlockSizeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cControlQubitsBlockSizeINTTerminalRuleCall_10_1_0 = (RuleCall)cControlQubitsBlockSizeAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cControlQubitsIterationTypeKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cControlQubitsIterationTypeAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cControlQubitsIterationTypeITERATION_TYPEEnumRuleCall_11_1_0 = (RuleCall)cControlQubitsIterationTypeAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cTargetQubitsIterationTypeKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cTargetQubitsIterationTypeAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cTargetQubitsIterationTypeITERATION_TYPEEnumRuleCall_12_1_0 = (RuleCall)cTargetQubitsIterationTypeAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cIncrementByKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cIncrementByAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cIncrementByINTTerminalRuleCall_13_1_0 = (RuleCall)cIncrementByAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cOperationsKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cOperationsAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_14_2_0 = (RuleCall)cOperationsAssignment_14_2.eContents().get(0);
		private final Group cGroup_14_3 = (Group)cGroup_14.eContents().get(3);
		private final Keyword cCommaKeyword_14_3_0 = (Keyword)cGroup_14_3.eContents().get(0);
		private final Assignment cOperationsAssignment_14_3_1 = (Assignment)cGroup_14_3.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_14_3_1_0 = (RuleCall)cOperationsAssignment_14_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Keyword cTargetQubitsKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cLeftSquareBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cLeftParenthesisKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTargetQubitsAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTargetQubitsIndexParserRuleCall_18_0 = (RuleCall)cTargetQubitsAssignment_18.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Group cGroup_20 = (Group)cGroup.eContents().get(20);
		private final Keyword cCommaKeyword_20_0 = (Keyword)cGroup_20.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Assignment cTargetQubitsAssignment_20_2 = (Assignment)cGroup_20.eContents().get(2);
		private final RuleCall cTargetQubitsIndexParserRuleCall_20_2_0 = (RuleCall)cTargetQubitsAssignment_20_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_20_3 = (Keyword)cGroup_20.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Group cGroup_22 = (Group)cGroup.eContents().get(22);
		private final Keyword cControlQubitsKeyword_22_0 = (Keyword)cGroup_22.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_22_1 = (Keyword)cGroup_22.eContents().get(1);
		private final Assignment cControlQubitsAssignment_22_2 = (Assignment)cGroup_22.eContents().get(2);
		private final RuleCall cControlQubitsIndexParserRuleCall_22_2_0 = (RuleCall)cControlQubitsAssignment_22_2.eContents().get(0);
		private final Group cGroup_22_3 = (Group)cGroup_22.eContents().get(3);
		private final Keyword cCommaKeyword_22_3_0 = (Keyword)cGroup_22_3.eContents().get(0);
		private final Assignment cControlQubitsAssignment_22_3_1 = (Assignment)cGroup_22_3.eContents().get(1);
		private final RuleCall cControlQubitsIndexParserRuleCall_22_3_1_0 = (RuleCall)cControlQubitsAssignment_22_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_22_4 = (Keyword)cGroup_22.eContents().get(4);
		private final Group cGroup_23 = (Group)cGroup.eContents().get(23);
		private final Keyword cFixedControlQubitsKeyword_23_0 = (Keyword)cGroup_23.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_23_1 = (Keyword)cGroup_23.eContents().get(1);
		private final Assignment cFixedControlQubitsAssignment_23_2 = (Assignment)cGroup_23.eContents().get(2);
		private final RuleCall cFixedControlQubitsIndexParserRuleCall_23_2_0 = (RuleCall)cFixedControlQubitsAssignment_23_2.eContents().get(0);
		private final Group cGroup_23_3 = (Group)cGroup_23.eContents().get(3);
		private final Keyword cCommaKeyword_23_3_0 = (Keyword)cGroup_23_3.eContents().get(0);
		private final Assignment cFixedControlQubitsAssignment_23_3_1 = (Assignment)cGroup_23_3.eContents().get(1);
		private final RuleCall cFixedControlQubitsIndexParserRuleCall_23_3_1_0 = (RuleCall)cFixedControlQubitsAssignment_23_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_23_4 = (Keyword)cGroup_23.eContents().get(4);
		private final Group cGroup_24 = (Group)cGroup.eContents().get(24);
		private final Keyword cFixedTargetQubitsKeyword_24_0 = (Keyword)cGroup_24.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_24_1 = (Keyword)cGroup_24.eContents().get(1);
		private final Assignment cFixedTargetQubitsAssignment_24_2 = (Assignment)cGroup_24.eContents().get(2);
		private final RuleCall cFixedTargetQubitsIndexParserRuleCall_24_2_0 = (RuleCall)cFixedTargetQubitsAssignment_24_2.eContents().get(0);
		private final Group cGroup_24_3 = (Group)cGroup_24.eContents().get(3);
		private final Keyword cCommaKeyword_24_3_0 = (Keyword)cGroup_24_3.eContents().get(0);
		private final Assignment cFixedTargetQubitsAssignment_24_3_1 = (Assignment)cGroup_24_3.eContents().get(1);
		private final RuleCall cFixedTargetQubitsIndexParserRuleCall_24_3_1_0 = (RuleCall)cFixedTargetQubitsAssignment_24_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_24_4 = (Keyword)cGroup_24.eContents().get(4);
		private final Keyword cLoopKeyword_25 = (Keyword)cGroup.eContents().get(25);
		private final Assignment cLoopAssignment_26 = (Assignment)cGroup.eContents().get(26);
		private final CrossReference cLoopConcreteLoopOperationCrossReference_26_0 = (CrossReference)cLoopAssignment_26.eContents().get(0);
		private final RuleCall cLoopConcreteLoopOperationEStringParserRuleCall_26_0_1 = (RuleCall)cLoopConcreteLoopOperationCrossReference_26_0.eContents().get(1);
		private final Keyword cLoopTargetQubitsKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cLeftSquareBracketKeyword_28 = (Keyword)cGroup.eContents().get(28);
		private final Keyword cLeftParenthesisKeyword_29 = (Keyword)cGroup.eContents().get(29);
		private final Assignment cLoopTargetQubitsAssignment_30 = (Assignment)cGroup.eContents().get(30);
		private final RuleCall cLoopTargetQubitsIndexParserRuleCall_30_0 = (RuleCall)cLoopTargetQubitsAssignment_30.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_31 = (Keyword)cGroup.eContents().get(31);
		private final Group cGroup_32 = (Group)cGroup.eContents().get(32);
		private final Keyword cCommaKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Assignment cLoopTargetQubitsAssignment_32_2 = (Assignment)cGroup_32.eContents().get(2);
		private final RuleCall cLoopTargetQubitsIndexParserRuleCall_32_2_0 = (RuleCall)cLoopTargetQubitsAssignment_32_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_32_3 = (Keyword)cGroup_32.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_33 = (Keyword)cGroup.eContents().get(33);
		private final Group cGroup_34 = (Group)cGroup.eContents().get(34);
		private final Keyword cLoopControlQubitsKeyword_34_0 = (Keyword)cGroup_34.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_34_1 = (Keyword)cGroup_34.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_34_2 = (Keyword)cGroup_34.eContents().get(2);
		private final Assignment cLoopControlQubitsAssignment_34_3 = (Assignment)cGroup_34.eContents().get(3);
		private final RuleCall cLoopControlQubitsIndexParserRuleCall_34_3_0 = (RuleCall)cLoopControlQubitsAssignment_34_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_34_4 = (Keyword)cGroup_34.eContents().get(4);
		private final Group cGroup_34_5 = (Group)cGroup_34.eContents().get(5);
		private final Keyword cCommaKeyword_34_5_0 = (Keyword)cGroup_34_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_34_5_1 = (Keyword)cGroup_34_5.eContents().get(1);
		private final Assignment cLoopControlQubitsAssignment_34_5_2 = (Assignment)cGroup_34_5.eContents().get(2);
		private final RuleCall cLoopControlQubitsIndexParserRuleCall_34_5_2_0 = (RuleCall)cLoopControlQubitsAssignment_34_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_34_5_3 = (Keyword)cGroup_34_5.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_34_6 = (Keyword)cGroup_34.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_35 = (Keyword)cGroup.eContents().get(35);
		
		//Loop returns LoopOperation:
		//    'Loop'
		//    name=EString
		//    '{'
		//        (inverseForm?='inverseForm')?
		//        (incrementBlockTargetQubits?='incrementBlockTargetQubits')?
		//        (incrementBlockControlQubits?='incrementBlockControlQubits')?
		//        ('iterations' iterations=INT)?
		//        (incrementTargetQubits?='incrementTargetQubits')?
		//        (incrementControlQubits?='incrementControlQubits')?
		//        ('targetQubitsBlockSize' targetQubitsBlockSize=INT)?
		//        ('controlQubitsBlockSize' controlQubitsBlockSize=INT)?
		//        ('controlQubitsIterationType' controlQubitsIterationType=ITERATION_TYPE)?
		//        ('targetQubitsIterationType' targetQubitsIterationType=ITERATION_TYPE)?
		//        ('incrementBy' incrementBy=INT)?
		//        ('operations' '(' operations+=Operation ( "," operations+=Operation)* ')')?
		//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')' )* ']'
		//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		//        ('fixedControlQubits' '[' fixedControlQubits+=Index ( "," fixedControlQubits+=Index)* ']' )?
		//        ('fixedTargetQubits' '[' fixedTargetQubits+=Index ( "," fixedTargetQubits+=Index)* ']' )?
		//        'loop' loop=[quope::ConcreteLoopOperation|EString]
		//        'loopTargetQubits' '[' '(' loopTargetQubits+=Index ')' ( "," '(' loopTargetQubits+=Index ')')* ']'
		//        ('loopControlQubits' '[' '(' loopControlQubits+=Index ')' ( "," '(' loopControlQubits+=Index ')' )* ']' )?
		////TODO    ('classicControl' classicControl=ClassicControl)?
		////        ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//    'Loop'
		//    name=EString
		//    '{'
		//        (inverseForm?='inverseForm')?
		//        (incrementBlockTargetQubits?='incrementBlockTargetQubits')?
		//        (incrementBlockControlQubits?='incrementBlockControlQubits')?
		//        ('iterations' iterations=INT)?
		//        (incrementTargetQubits?='incrementTargetQubits')?
		//        (incrementControlQubits?='incrementControlQubits')?
		//        ('targetQubitsBlockSize' targetQubitsBlockSize=INT)?
		//        ('controlQubitsBlockSize' controlQubitsBlockSize=INT)?
		//        ('controlQubitsIterationType' controlQubitsIterationType=ITERATION_TYPE)?
		//        ('targetQubitsIterationType' targetQubitsIterationType=ITERATION_TYPE)?
		//        ('incrementBy' incrementBy=INT)?
		//        ('operations' '(' operations+=Operation ( "," operations+=Operation)* ')')?
		//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')' )* ']'
		//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		//        ('fixedControlQubits' '[' fixedControlQubits+=Index ( "," fixedControlQubits+=Index)* ']' )?
		//        ('fixedTargetQubits' '[' fixedTargetQubits+=Index ( "," fixedTargetQubits+=Index)* ']' )?
		//        'loop' loop=[quope::ConcreteLoopOperation|EString]
		//        'loopTargetQubits' '[' '(' loopTargetQubits+=Index ')' ( "," '(' loopTargetQubits+=Index ')')* ']'
		//        ('loopControlQubits' '[' '(' loopControlQubits+=Index ')' ( "," '(' loopControlQubits+=Index ')' )* ']' )?
		////TODO    ('classicControl' classicControl=ClassicControl)?
		////        ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//    '}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(inverseForm?='inverseForm')?
		public Assignment getInverseFormAssignment_3() { return cInverseFormAssignment_3; }
		
		//'inverseForm'
		public Keyword getInverseFormInverseFormKeyword_3_0() { return cInverseFormInverseFormKeyword_3_0; }
		
		//(incrementBlockTargetQubits?='incrementBlockTargetQubits')?
		public Assignment getIncrementBlockTargetQubitsAssignment_4() { return cIncrementBlockTargetQubitsAssignment_4; }
		
		//'incrementBlockTargetQubits'
		public Keyword getIncrementBlockTargetQubitsIncrementBlockTargetQubitsKeyword_4_0() { return cIncrementBlockTargetQubitsIncrementBlockTargetQubitsKeyword_4_0; }
		
		//(incrementBlockControlQubits?='incrementBlockControlQubits')?
		public Assignment getIncrementBlockControlQubitsAssignment_5() { return cIncrementBlockControlQubitsAssignment_5; }
		
		//'incrementBlockControlQubits'
		public Keyword getIncrementBlockControlQubitsIncrementBlockControlQubitsKeyword_5_0() { return cIncrementBlockControlQubitsIncrementBlockControlQubitsKeyword_5_0; }
		
		//('iterations' iterations=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'iterations'
		public Keyword getIterationsKeyword_6_0() { return cIterationsKeyword_6_0; }
		
		//iterations=INT
		public Assignment getIterationsAssignment_6_1() { return cIterationsAssignment_6_1; }
		
		//INT
		public RuleCall getIterationsINTTerminalRuleCall_6_1_0() { return cIterationsINTTerminalRuleCall_6_1_0; }
		
		//(incrementTargetQubits?='incrementTargetQubits')?
		public Assignment getIncrementTargetQubitsAssignment_7() { return cIncrementTargetQubitsAssignment_7; }
		
		//'incrementTargetQubits'
		public Keyword getIncrementTargetQubitsIncrementTargetQubitsKeyword_7_0() { return cIncrementTargetQubitsIncrementTargetQubitsKeyword_7_0; }
		
		//(incrementControlQubits?='incrementControlQubits')?
		public Assignment getIncrementControlQubitsAssignment_8() { return cIncrementControlQubitsAssignment_8; }
		
		//'incrementControlQubits'
		public Keyword getIncrementControlQubitsIncrementControlQubitsKeyword_8_0() { return cIncrementControlQubitsIncrementControlQubitsKeyword_8_0; }
		
		//('targetQubitsBlockSize' targetQubitsBlockSize=INT)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'targetQubitsBlockSize'
		public Keyword getTargetQubitsBlockSizeKeyword_9_0() { return cTargetQubitsBlockSizeKeyword_9_0; }
		
		//targetQubitsBlockSize=INT
		public Assignment getTargetQubitsBlockSizeAssignment_9_1() { return cTargetQubitsBlockSizeAssignment_9_1; }
		
		//INT
		public RuleCall getTargetQubitsBlockSizeINTTerminalRuleCall_9_1_0() { return cTargetQubitsBlockSizeINTTerminalRuleCall_9_1_0; }
		
		//('controlQubitsBlockSize' controlQubitsBlockSize=INT)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'controlQubitsBlockSize'
		public Keyword getControlQubitsBlockSizeKeyword_10_0() { return cControlQubitsBlockSizeKeyword_10_0; }
		
		//controlQubitsBlockSize=INT
		public Assignment getControlQubitsBlockSizeAssignment_10_1() { return cControlQubitsBlockSizeAssignment_10_1; }
		
		//INT
		public RuleCall getControlQubitsBlockSizeINTTerminalRuleCall_10_1_0() { return cControlQubitsBlockSizeINTTerminalRuleCall_10_1_0; }
		
		//('controlQubitsIterationType' controlQubitsIterationType=ITERATION_TYPE)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'controlQubitsIterationType'
		public Keyword getControlQubitsIterationTypeKeyword_11_0() { return cControlQubitsIterationTypeKeyword_11_0; }
		
		//controlQubitsIterationType=ITERATION_TYPE
		public Assignment getControlQubitsIterationTypeAssignment_11_1() { return cControlQubitsIterationTypeAssignment_11_1; }
		
		//ITERATION_TYPE
		public RuleCall getControlQubitsIterationTypeITERATION_TYPEEnumRuleCall_11_1_0() { return cControlQubitsIterationTypeITERATION_TYPEEnumRuleCall_11_1_0; }
		
		//('targetQubitsIterationType' targetQubitsIterationType=ITERATION_TYPE)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'targetQubitsIterationType'
		public Keyword getTargetQubitsIterationTypeKeyword_12_0() { return cTargetQubitsIterationTypeKeyword_12_0; }
		
		//targetQubitsIterationType=ITERATION_TYPE
		public Assignment getTargetQubitsIterationTypeAssignment_12_1() { return cTargetQubitsIterationTypeAssignment_12_1; }
		
		//ITERATION_TYPE
		public RuleCall getTargetQubitsIterationTypeITERATION_TYPEEnumRuleCall_12_1_0() { return cTargetQubitsIterationTypeITERATION_TYPEEnumRuleCall_12_1_0; }
		
		//('incrementBy' incrementBy=INT)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'incrementBy'
		public Keyword getIncrementByKeyword_13_0() { return cIncrementByKeyword_13_0; }
		
		//incrementBy=INT
		public Assignment getIncrementByAssignment_13_1() { return cIncrementByAssignment_13_1; }
		
		//INT
		public RuleCall getIncrementByINTTerminalRuleCall_13_1_0() { return cIncrementByINTTerminalRuleCall_13_1_0; }
		
		//('operations' '(' operations+=Operation ( "," operations+=Operation)* ')')?
		public Group getGroup_14() { return cGroup_14; }
		
		//'operations'
		public Keyword getOperationsKeyword_14_0() { return cOperationsKeyword_14_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_14_1() { return cLeftParenthesisKeyword_14_1; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_14_2() { return cOperationsAssignment_14_2; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_14_2_0() { return cOperationsOperationParserRuleCall_14_2_0; }
		
		//( "," operations+=Operation)*
		public Group getGroup_14_3() { return cGroup_14_3; }
		
		//","
		public Keyword getCommaKeyword_14_3_0() { return cCommaKeyword_14_3_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_14_3_1() { return cOperationsAssignment_14_3_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_14_3_1_0() { return cOperationsOperationParserRuleCall_14_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14_4() { return cRightParenthesisKeyword_14_4; }
		
		//'targetQubits'
		public Keyword getTargetQubitsKeyword_15() { return cTargetQubitsKeyword_15; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_16() { return cLeftSquareBracketKeyword_16; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_17() { return cLeftParenthesisKeyword_17; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_18() { return cTargetQubitsAssignment_18; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_18_0() { return cTargetQubitsIndexParserRuleCall_18_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_19() { return cRightParenthesisKeyword_19; }
		
		//( "," '(' targetQubits+=Index ')' )*
		public Group getGroup_20() { return cGroup_20; }
		
		//","
		public Keyword getCommaKeyword_20_0() { return cCommaKeyword_20_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_20_1() { return cLeftParenthesisKeyword_20_1; }
		
		//targetQubits+=Index
		public Assignment getTargetQubitsAssignment_20_2() { return cTargetQubitsAssignment_20_2; }
		
		//Index
		public RuleCall getTargetQubitsIndexParserRuleCall_20_2_0() { return cTargetQubitsIndexParserRuleCall_20_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_20_3() { return cRightParenthesisKeyword_20_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_21() { return cRightSquareBracketKeyword_21; }
		
		//('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
		public Group getGroup_22() { return cGroup_22; }
		
		//'controlQubits'
		public Keyword getControlQubitsKeyword_22_0() { return cControlQubitsKeyword_22_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_22_1() { return cLeftSquareBracketKeyword_22_1; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_22_2() { return cControlQubitsAssignment_22_2; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_22_2_0() { return cControlQubitsIndexParserRuleCall_22_2_0; }
		
		//( "," controlQubits+=Index)*
		public Group getGroup_22_3() { return cGroup_22_3; }
		
		//","
		public Keyword getCommaKeyword_22_3_0() { return cCommaKeyword_22_3_0; }
		
		//controlQubits+=Index
		public Assignment getControlQubitsAssignment_22_3_1() { return cControlQubitsAssignment_22_3_1; }
		
		//Index
		public RuleCall getControlQubitsIndexParserRuleCall_22_3_1_0() { return cControlQubitsIndexParserRuleCall_22_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_22_4() { return cRightSquareBracketKeyword_22_4; }
		
		//('fixedControlQubits' '[' fixedControlQubits+=Index ( "," fixedControlQubits+=Index)* ']' )?
		public Group getGroup_23() { return cGroup_23; }
		
		//'fixedControlQubits'
		public Keyword getFixedControlQubitsKeyword_23_0() { return cFixedControlQubitsKeyword_23_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_23_1() { return cLeftSquareBracketKeyword_23_1; }
		
		//fixedControlQubits+=Index
		public Assignment getFixedControlQubitsAssignment_23_2() { return cFixedControlQubitsAssignment_23_2; }
		
		//Index
		public RuleCall getFixedControlQubitsIndexParserRuleCall_23_2_0() { return cFixedControlQubitsIndexParserRuleCall_23_2_0; }
		
		//( "," fixedControlQubits+=Index)*
		public Group getGroup_23_3() { return cGroup_23_3; }
		
		//","
		public Keyword getCommaKeyword_23_3_0() { return cCommaKeyword_23_3_0; }
		
		//fixedControlQubits+=Index
		public Assignment getFixedControlQubitsAssignment_23_3_1() { return cFixedControlQubitsAssignment_23_3_1; }
		
		//Index
		public RuleCall getFixedControlQubitsIndexParserRuleCall_23_3_1_0() { return cFixedControlQubitsIndexParserRuleCall_23_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_23_4() { return cRightSquareBracketKeyword_23_4; }
		
		//('fixedTargetQubits' '[' fixedTargetQubits+=Index ( "," fixedTargetQubits+=Index)* ']' )?
		public Group getGroup_24() { return cGroup_24; }
		
		//'fixedTargetQubits'
		public Keyword getFixedTargetQubitsKeyword_24_0() { return cFixedTargetQubitsKeyword_24_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_24_1() { return cLeftSquareBracketKeyword_24_1; }
		
		//fixedTargetQubits+=Index
		public Assignment getFixedTargetQubitsAssignment_24_2() { return cFixedTargetQubitsAssignment_24_2; }
		
		//Index
		public RuleCall getFixedTargetQubitsIndexParserRuleCall_24_2_0() { return cFixedTargetQubitsIndexParserRuleCall_24_2_0; }
		
		//( "," fixedTargetQubits+=Index)*
		public Group getGroup_24_3() { return cGroup_24_3; }
		
		//","
		public Keyword getCommaKeyword_24_3_0() { return cCommaKeyword_24_3_0; }
		
		//fixedTargetQubits+=Index
		public Assignment getFixedTargetQubitsAssignment_24_3_1() { return cFixedTargetQubitsAssignment_24_3_1; }
		
		//Index
		public RuleCall getFixedTargetQubitsIndexParserRuleCall_24_3_1_0() { return cFixedTargetQubitsIndexParserRuleCall_24_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_24_4() { return cRightSquareBracketKeyword_24_4; }
		
		//'loop'
		public Keyword getLoopKeyword_25() { return cLoopKeyword_25; }
		
		//loop=[quope::ConcreteLoopOperation|EString]
		public Assignment getLoopAssignment_26() { return cLoopAssignment_26; }
		
		//[quope::ConcreteLoopOperation|EString]
		public CrossReference getLoopConcreteLoopOperationCrossReference_26_0() { return cLoopConcreteLoopOperationCrossReference_26_0; }
		
		//EString
		public RuleCall getLoopConcreteLoopOperationEStringParserRuleCall_26_0_1() { return cLoopConcreteLoopOperationEStringParserRuleCall_26_0_1; }
		
		//'loopTargetQubits'
		public Keyword getLoopTargetQubitsKeyword_27() { return cLoopTargetQubitsKeyword_27; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_28() { return cLeftSquareBracketKeyword_28; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_29() { return cLeftParenthesisKeyword_29; }
		
		//loopTargetQubits+=Index
		public Assignment getLoopTargetQubitsAssignment_30() { return cLoopTargetQubitsAssignment_30; }
		
		//Index
		public RuleCall getLoopTargetQubitsIndexParserRuleCall_30_0() { return cLoopTargetQubitsIndexParserRuleCall_30_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_31() { return cRightParenthesisKeyword_31; }
		
		//( "," '(' loopTargetQubits+=Index ')')*
		public Group getGroup_32() { return cGroup_32; }
		
		//","
		public Keyword getCommaKeyword_32_0() { return cCommaKeyword_32_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_32_1() { return cLeftParenthesisKeyword_32_1; }
		
		//loopTargetQubits+=Index
		public Assignment getLoopTargetQubitsAssignment_32_2() { return cLoopTargetQubitsAssignment_32_2; }
		
		//Index
		public RuleCall getLoopTargetQubitsIndexParserRuleCall_32_2_0() { return cLoopTargetQubitsIndexParserRuleCall_32_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_32_3() { return cRightParenthesisKeyword_32_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_33() { return cRightSquareBracketKeyword_33; }
		
		//('loopControlQubits' '[' '(' loopControlQubits+=Index ')' ( "," '(' loopControlQubits+=Index ')' )* ']' )?
		public Group getGroup_34() { return cGroup_34; }
		
		//'loopControlQubits'
		public Keyword getLoopControlQubitsKeyword_34_0() { return cLoopControlQubitsKeyword_34_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_34_1() { return cLeftSquareBracketKeyword_34_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_34_2() { return cLeftParenthesisKeyword_34_2; }
		
		//loopControlQubits+=Index
		public Assignment getLoopControlQubitsAssignment_34_3() { return cLoopControlQubitsAssignment_34_3; }
		
		//Index
		public RuleCall getLoopControlQubitsIndexParserRuleCall_34_3_0() { return cLoopControlQubitsIndexParserRuleCall_34_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_34_4() { return cRightParenthesisKeyword_34_4; }
		
		//( "," '(' loopControlQubits+=Index ')' )*
		public Group getGroup_34_5() { return cGroup_34_5; }
		
		//","
		public Keyword getCommaKeyword_34_5_0() { return cCommaKeyword_34_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_34_5_1() { return cLeftParenthesisKeyword_34_5_1; }
		
		//loopControlQubits+=Index
		public Assignment getLoopControlQubitsAssignment_34_5_2() { return cLoopControlQubitsAssignment_34_5_2; }
		
		//Index
		public RuleCall getLoopControlQubitsIndexParserRuleCall_34_5_2_0() { return cLoopControlQubitsIndexParserRuleCall_34_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_34_5_3() { return cRightParenthesisKeyword_34_5_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_34_6() { return cRightSquareBracketKeyword_34_6; }
		
		////TODO    ('classicControl' classicControl=ClassicControl)?
		////        ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
		//    '}'
		public Keyword getRightCurlyBracketKeyword_35() { return cRightCurlyBracketKeyword_35; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperationConcreteQuantumOperationCrossReference_0_0 = (CrossReference)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationConcreteQuantumOperationEStringParserRuleCall_0_0_1 = (RuleCall)cOperationConcreteQuantumOperationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQuboAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cQuboQuboCrossReference_1_1_0 = (CrossReference)cQuboAssignment_1_1.eContents().get(0);
		private final RuleCall cQuboQuboEStringParserRuleCall_1_1_0_1 = (RuleCall)cQuboQuboCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Operation returns Operation:
		//    operation=[quope::ConcreteQuantumOperation|EString] ('(' qubo=[qubo::Qubo|EString] ')')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=[quope::ConcreteQuantumOperation|EString] ('(' qubo=[qubo::Qubo|EString] ')')?
		public Group getGroup() { return cGroup; }
		
		//operation=[quope::ConcreteQuantumOperation|EString]
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//[quope::ConcreteQuantumOperation|EString]
		public CrossReference getOperationConcreteQuantumOperationCrossReference_0_0() { return cOperationConcreteQuantumOperationCrossReference_0_0; }
		
		//EString
		public RuleCall getOperationConcreteQuantumOperationEStringParserRuleCall_0_0_1() { return cOperationConcreteQuantumOperationEStringParserRuleCall_0_0_1; }
		
		//('(' qubo=[qubo::Qubo|EString] ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//qubo=[qubo::Qubo|EString]
		public Assignment getQuboAssignment_1_1() { return cQuboAssignment_1_1; }
		
		//[qubo::Qubo|EString]
		public CrossReference getQuboQuboCrossReference_1_1_0() { return cQuboQuboCrossReference_1_1_0; }
		
		//EString
		public RuleCall getQuboQuboEStringParserRuleCall_1_1_0_1() { return cQuboQuboEStringParserRuleCall_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.Index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Index returns Index:
		//    IndexInt | IndexRange
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexInt | IndexRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexInt
		public RuleCall getIndexIntParserRuleCall_0() { return cIndexIntParserRuleCall_0; }
		
		//IndexRange
		public RuleCall getIndexRangeParserRuleCall_1() { return cIndexRangeParserRuleCall_1; }
	}
	public class IndexIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.IndexInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRegisterRegisterCrossReference_1_0_0 = (CrossReference)cRegisterAssignment_1_0.eContents().get(0);
		private final RuleCall cRegisterRegisterEStringParserRuleCall_1_0_0_1 = (RuleCall)cRegisterRegisterCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		
		//IndexInt returns IndexInt:
		//    {IndexInt}
		//    (register=[Register|EString] ',')? index=INT
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexInt}
		//(register=[Register|EString] ',')? index=INT
		public Group getGroup() { return cGroup; }
		
		//{IndexInt}
		public Action getIndexIntAction_0() { return cIndexIntAction_0; }
		
		//(register=[Register|EString] ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//register=[Register|EString]
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }
		
		//[Register|EString]
		public CrossReference getRegisterRegisterCrossReference_1_0_0() { return cRegisterRegisterCrossReference_1_0_0; }
		
		//EString
		public RuleCall getRegisterRegisterEStringParserRuleCall_1_0_0_1() { return cRegisterRegisterEStringParserRuleCall_1_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
	}
	public class IndexRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.IndexRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexRangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRegisterRegisterCrossReference_1_0_0 = (CrossReference)cRegisterAssignment_1_0.eContents().get(0);
		private final RuleCall cRegisterRegisterEStringParserRuleCall_1_0_0_1 = (RuleCall)cRegisterRegisterCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBeginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBeginINTTerminalRuleCall_2_0 = (RuleCall)cBeginAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		
		//IndexRange returns IndexRange:
		//    {IndexRange}
		//    (register=[Register|EString] ',')? begin=INT'-'end=INT
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexRange}
		//(register=[Register|EString] ',')? begin=INT'-'end=INT
		public Group getGroup() { return cGroup; }
		
		//{IndexRange}
		public Action getIndexRangeAction_0() { return cIndexRangeAction_0; }
		
		//(register=[Register|EString] ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//register=[Register|EString]
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }
		
		//[Register|EString]
		public CrossReference getRegisterRegisterCrossReference_1_0_0() { return cRegisterRegisterCrossReference_1_0_0; }
		
		//EString
		public RuleCall getRegisterRegisterEStringParserRuleCall_1_0_0_1() { return cRegisterRegisterEStringParserRuleCall_1_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//begin=INT
		public Assignment getBeginAssignment_2() { return cBeginAssignment_2; }
		
		//INT
		public RuleCall getBeginINTTerminalRuleCall_2_0() { return cBeginINTTerminalRuleCall_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//end=INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		////
		////
		////
		////
		////
		////
		////
		////
		////
		////
		////EStructuralFeature returns ecore::EStructuralFeature:
		////    EAttribute | EReference;
		////
		////
		////
		////
		////EClassifier returns ecore::EClassifier:
		////    EClass | EDataType_Impl | EEnum;
		////
		////
		////
		////
		////
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.EDoubleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		////
		////
		////
		////Qubit returns Qubit:
		////    {Qubit}
		////    'Qubit'
		////    id=EIntegerObject;
		////
		////EIntegerObject returns ecore::EIntegerObject:
		////    '-'? INT;
		////
		////ClassicBit returns ClassicBit:
		////    {ClassicBit}
		////    'ClassicBit'
		////    id=EIntegerObject;
		////
		////ClassicControl returns ClassicControl:
		////    'ClassicControl'
		////    '{'
		////        ('value' value=EDoubleObject)?
		////        'classicRegister' classicRegister=[ClassicRegister|EString]
		////    '}';
		////
		////ConcreteQuantumOperation returns quope::ConcreteQuantumOperation:
		////    (reversible?='reversible')?
		////    'ConcreteQuantumOperation'
		////    name=EString
		////    '{'
		////        ('abbreviation' abbreviation=EString)?
		////        ('paletteIconPath' paletteIconPath=EString)?
		////        ('styleIconPath' styleIconPath=EString)?
		////        'type' type=[ecore::EClass|EString]
		////        ('reverse' reverse=[quope::ConcreteQuantumOperation|EString])?
		////        ('parameter' parameter=Parameter)?
		////        ('fixedQuantumOperation' fixedQuantumOperation=FixedQuantumOperation)?
		////    '}';
		////
		////
		////
		////
		////
		////
		//EDoubleObject returns ecore::EDoubleObject:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class ITERATION_TYPEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "quantum.circuit.lang.QuCircuit.ITERATION_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHIFTSHIFTKeyword_1_0 = (Keyword)cSHIFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHANGE_BLOCKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHANGE_BLOCKCHANGE_BLOCKKeyword_2_0 = (Keyword)cCHANGE_BLOCKEnumLiteralDeclaration_2.eContents().get(0);
		
		////
		////EClass returns ecore::EClass:
		////    {ecore::EClass}
		////    (abstract?='abstract')?
		////    (interface?='interface')?
		////    'EClass'
		////    name=EString
		////    '{'
		////        ('instanceClassName' instanceClassName=EString)?
		////        ('instanceTypeName' instanceTypeName=EString)?
		////        ('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		////        ('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		////        ('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		////        ('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
		////    '}';
		////
		////Parameter returns quope::Parameter:
		////    {quope::Parameter}
		////    (theta?='theta')?
		////    (phi?='phi')?
		////    (lambda?='lambda')?
		////    'Parameter'
		////    ;
		////
		////FixedQuantumOperation returns quope::FixedQuantumOperation:
		////    'FixedQuantumOperation'
		////    '{'
		////        'numberOfTargetQubits' numberOfTargetQubits=EIntegerObject
		////        'numberOfControlQubits' numberOfControlQubits=EIntegerObject
		////        'numberOfClassicBits' numberOfClassicBits=EIntegerObject
		////    '}';
		////
		////EBooleanObject returns ecore::EBooleanObject:
		////    'true' | 'false';
		////
		////EAnnotation returns ecore::EAnnotation:
		////    {ecore::EAnnotation}
		////    'EAnnotation'
		////    '{'
		////        ('source' source=EString)?
		////        ('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		////        ('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
		////    '}';
		////
		////ETypeParameter returns ecore::ETypeParameter:
		////    {ecore::ETypeParameter}
		////    'ETypeParameter'
		////    name=EString
		////    '{'
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
		////    '}';
		////
		////EBoolean returns ecore::EBoolean:
		////    'true' | 'false';
		////
		////EOperation returns ecore::EOperation:
		////    {ecore::EOperation}
		////    'EOperation'
		////    name=EString
		////    '{'
		////        ('ordered' ordered=EBoolean)?
		////        ('unique' unique=EBoolean)?
		////        ('lowerBound' lowerBound=EInt)?
		////        ('upperBound' upperBound=EInt)?
		////        ('eType' eType=[ecore::EClassifier|EString])?
		////        ('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eGenericType' eGenericType=EGenericType)?
		////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		////        ('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		////        ('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
		////    '}';
		////
		////EGenericType returns ecore::EGenericType:
		////    {ecore::EGenericType}
		////    'EGenericType'
		////    '{'
		////        ('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		////        ('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		////        ('eUpperBound' eUpperBound=EGenericType)?
		////        ('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		////        ('eLowerBound' eLowerBound=EGenericType)?
		////    '}';
		////
		////EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
		////    {ecore::EStringToStringMapEntry}
		////    'EStringToStringMapEntry'
		////    '{'
		////        ('key' key=EString)?
		////        ('value' value=EString)?
		////    '}';
		////
		////EObject returns ecore::EObject:
		////    {ecore::EObject}
		////    'EObject'
		////    ;
		////
		////EInt returns ecore::EInt:
		////    '-'? INT;
		////
		////EParameter returns ecore::EParameter:
		////    {ecore::EParameter}
		////    'EParameter'
		////    name=EString
		////    '{'
		////        ('ordered' ordered=EBoolean)?
		////        ('unique' unique=EBoolean)?
		////        ('lowerBound' lowerBound=EInt)?
		////        ('upperBound' upperBound=EInt)?
		////        ('eType' eType=[ecore::EClassifier|EString])?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eGenericType' eGenericType=EGenericType)?
		////    '}';
		////
		////EDataType_Impl returns ecore::EDataType:
		////    {ecore::EDataType}
		////    'EDataType'
		////    name=EString
		////    '{'
		////        ('instanceClassName' instanceClassName=EString)?
		////        ('instanceTypeName' instanceTypeName=EString)?
		////        ('serializable' serializable=EBoolean)?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		////    '}';
		////
		////EEnum returns ecore::EEnum:
		////    {ecore::EEnum}
		////    'EEnum'
		////    name=EString
		////    '{'
		////        ('instanceClassName' instanceClassName=EString)?
		////        ('instanceTypeName' instanceTypeName=EString)?
		////        ('serializable' serializable=EBoolean)?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		////        ('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
		////    '}';
		////
		////EEnumLiteral returns ecore::EEnumLiteral:
		////    {ecore::EEnumLiteral}
		////    'EEnumLiteral'
		////    name=EString
		////    '{'
		////        ('value' value=EInt)?
		////        ('literal' literal=EString)?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////    '}';
		////
		////EAttribute returns ecore::EAttribute:
		////    {ecore::EAttribute}
		////    (volatile?='volatile')?
		////    (transient?='transient')?
		////    (unsettable?='unsettable')?
		////    (derived?='derived')?
		////    (iD?='iD')?
		////    'EAttribute'
		////    name=EString
		////    '{'
		////        ('ordered' ordered=EBoolean)?
		////        ('unique' unique=EBoolean)?
		////        ('lowerBound' lowerBound=EInt)?
		////        ('upperBound' upperBound=EInt)?
		////        ('changeable' changeable=EBoolean)?
		////        ('defaultValueLiteral' defaultValueLiteral=EString)?
		////        ('eType' eType=[ecore::EClassifier|EString])?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eGenericType' eGenericType=EGenericType)?
		////    '}';
		////
		////EReference returns ecore::EReference:
		////    {ecore::EReference}
		////    (volatile?='volatile')?
		////    (transient?='transient')?
		////    (unsettable?='unsettable')?
		////    (derived?='derived')?
		////    (containment?='containment')?
		////    'EReference'
		////    name=EString
		////    '{'
		////        ('ordered' ordered=EBoolean)?
		////        ('unique' unique=EBoolean)?
		////        ('lowerBound' lowerBound=EInt)?
		////        ('upperBound' upperBound=EInt)?
		////        ('changeable' changeable=EBoolean)?
		////        ('defaultValueLiteral' defaultValueLiteral=EString)?
		////        ('resolveProxies' resolveProxies=EBoolean)?
		////        ('eType' eType=[ecore::EClassifier|EString])?
		////        ('eOpposite' eOpposite=[ecore::EReference|EString])?
		////        ('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		////        ('eGenericType' eGenericType=EGenericType)?
		////    '}';
		////
		////
		////LoopOperation returns quope::LoopOperation:
		////    {quope::LoopOperation}
		////    'LoopOperation'
		////    name=EString
		////    '{'
		////        ('allowsFixedControlQubits' allowsFixedControlQubits=EBooleanObject)?
		////        ('allowsFixedTargetQubits' allowsFixedTargetQubits=EBooleanObject)?
		////        ('allowsControlQubitsIterationType' allowsControlQubitsIterationType=EBooleanObject)?
		////        ('allowsTargetQubitsIterationType' allowsTargetQubitsIterationType=EBooleanObject)?
		////        ('allowsControlQubitsBlockSize' allowsControlQubitsBlockSize=EBooleanObject)?
		////        ('allowsTargetQubitsBlockSize' allowsTargetQubitsBlockSize=EBooleanObject)?
		////        ('allowsIncrementControlQubits' allowsIncrementControlQubits=EBooleanObject)?
		////        ('allowsIncrementTargetQubits' allowsIncrementTargetQubits=EBooleanObject)?
		////        ('allowsIterations' allowsIterations=EBooleanObject)?
		////    '}';
		//enum ITERATION_TYPE returns ITERATION_TYPE:
		//                NONE = 'NONE' | SHIFT = 'SHIFT' | CHANGE_BLOCK = 'CHANGE_BLOCK';
		public EnumRule getRule() { return rule; }
		
		//NONE = 'NONE' | SHIFT = 'SHIFT' | CHANGE_BLOCK = 'CHANGE_BLOCK'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE = 'NONE'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//SHIFT = 'SHIFT'
		public EnumLiteralDeclaration getSHIFTEnumLiteralDeclaration_1() { return cSHIFTEnumLiteralDeclaration_1; }
		
		//'SHIFT'
		public Keyword getSHIFTSHIFTKeyword_1_0() { return cSHIFTSHIFTKeyword_1_0; }
		
		//CHANGE_BLOCK = 'CHANGE_BLOCK'
		public EnumLiteralDeclaration getCHANGE_BLOCKEnumLiteralDeclaration_2() { return cCHANGE_BLOCKEnumLiteralDeclaration_2; }
		
		//'CHANGE_BLOCK'
		public Keyword getCHANGE_BLOCKCHANGE_BLOCKKeyword_2_0() { return cCHANGE_BLOCKCHANGE_BLOCKKeyword_2_0; }
	}
	
	private final QuantumCircuitElements pQuantumCircuit;
	private final QuantumRegisterElements pQuantumRegister;
	private final ClassicRegisterElements pClassicRegister;
	private final LayerElements pLayer;
	private final QuantumOperationElements pQuantumOperation;
	private final StatePreparationElements pStatePreparation;
	private final ElementaryQuantumGateElements pElementaryQuantumGate;
	private final AngleParameterElements pAngleParameter;
	private final MeasurementElements pMeasurement;
	private final CompositeQuantumGateElements pCompositeQuantumGate;
	private final LoopElements pLoop;
	private final OperationElements pOperation;
	private final IndexElements pIndex;
	private final IndexIntElements pIndexInt;
	private final IndexRangeElements pIndexRange;
	private final EStringElements pEString;
	private final EDoubleObjectElements pEDoubleObject;
	private final ITERATION_TYPEElements eITERATION_TYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuCircuitGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuantumCircuit = new QuantumCircuitElements();
		this.pQuantumRegister = new QuantumRegisterElements();
		this.pClassicRegister = new ClassicRegisterElements();
		this.pLayer = new LayerElements();
		this.pQuantumOperation = new QuantumOperationElements();
		this.pStatePreparation = new StatePreparationElements();
		this.pElementaryQuantumGate = new ElementaryQuantumGateElements();
		this.pAngleParameter = new AngleParameterElements();
		this.pMeasurement = new MeasurementElements();
		this.pCompositeQuantumGate = new CompositeQuantumGateElements();
		this.pLoop = new LoopElements();
		this.pOperation = new OperationElements();
		this.pIndex = new IndexElements();
		this.pIndexInt = new IndexIntElements();
		this.pIndexRange = new IndexRangeElements();
		this.pEString = new EStringElements();
		this.pEDoubleObject = new EDoubleObjectElements();
		this.eITERATION_TYPE = new ITERATION_TYPEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("quantum.circuit.lang.QuCircuit".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QuantumCircuit returns QuantumCircuit:
	//    'QuantumCircuit'
	//    name=EString
	//    '{'
	//        quantumRegisters+=QuantumRegister (quantumRegisters+=QuantumRegister)*
	//        (classicRegisters+=ClassicRegister)*
	//        layers+=Layer (layers+=Layer)*
	//    '}'
	//    ;
	public QuantumCircuitElements getQuantumCircuitAccess() {
		return pQuantumCircuit;
	}
	
	public ParserRule getQuantumCircuitRule() {
		return getQuantumCircuitAccess().getRule();
	}
	
	//QuantumRegister returns QuantumRegister:
	//    {QuantumRegister}
	//    'QuantumRegister'
	//    name=EString
	//    '{'
	//        ('NumberOfQubits' numberOfQubits=INT)?
	//    '}';
	public QuantumRegisterElements getQuantumRegisterAccess() {
		return pQuantumRegister;
	}
	
	public ParserRule getQuantumRegisterRule() {
		return getQuantumRegisterAccess().getRule();
	}
	
	//ClassicRegister returns ClassicRegister:
	//    {ClassicRegister}
	//    'ClassicRegister'
	//    name=EString
	//    '{'
	//        ('NumberOfBits'  numberOfBits=INT)?
	//    '}';
	public ClassicRegisterElements getClassicRegisterAccess() {
		return pClassicRegister;
	}
	
	public ParserRule getClassicRegisterRule() {
		return getClassicRegisterAccess().getRule();
	}
	
	//Layer returns Layer:
	//    {Layer}
	//    'Layer'
	//    name=EString
	//    '{'
	//        quantumOperations+=QuantumOperation ( "," quantumOperations+=QuantumOperation)*
	//    '}';
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//QuantumOperation returns QuantumOperation:
	//    StatePreparation | ElementaryQuantumGate | Measurement  | CompositeQuantumGate | Loop
	//    ;
	public QuantumOperationElements getQuantumOperationAccess() {
		return pQuantumOperation;
	}
	
	public ParserRule getQuantumOperationRule() {
		return getQuantumOperationAccess().getRule();
	}
	
	//StatePreparation returns StatePreparation:
	//    'StatePreparation'
	//    name=EString
	//    '{'
	//        'operation' operations+=Operation ( "," operations+=Operation)*
	//        'targetQubits' '[' targetQubits+=Index ( "," targetQubits+=Index)* ']'
	//        //TODO classic control
	//        //('classicControl' classicControl=ClassicControl)?
	//    '}';
	public StatePreparationElements getStatePreparationAccess() {
		return pStatePreparation;
	}
	
	public ParserRule getStatePreparationRule() {
		return getStatePreparationAccess().getRule();
	}
	
	//ElementaryQuantumGate returns ElementaryQuantumGate:
	//    'ElementaryQuantumGate'
	//    (inverseForm?='inverseForm')?
	//    name=EString
	//    '{'
	//        ('operation' operations+=Operation)?
	//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
	//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']')*
	//        //TODO ('classicControl' classicControl=ClassicControl)?
	//        ('angleParameter' angleParameter=AngleParameter)?
	//    '}';
	public ElementaryQuantumGateElements getElementaryQuantumGateAccess() {
		return pElementaryQuantumGate;
	}
	
	public ParserRule getElementaryQuantumGateRule() {
		return getElementaryQuantumGateAccess().getRule();
	}
	
	//AngleParameter returns AngleParameter:
	//    {AngleParameter}
	//    'AngleParameter'
	//    '{'
	//        ('theta' theta=EDoubleObject)?
	//        ('phi' phi=EDoubleObject)?
	//        ('lambda' lambda=EDoubleObject)?
	//    '}';
	public AngleParameterElements getAngleParameterAccess() {
		return pAngleParameter;
	}
	
	public ParserRule getAngleParameterRule() {
		return getAngleParameterAccess().getRule();
	}
	
	//Measurement returns Measurement:
	//    'Measurement'
	//    name=EString
	//    '{'
	//        ('operation' operations+=Operation)?
	//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')')* ']'
	//        'classicBits' '[' '(' classicBits+=Index  ')' ( "," '(' classicBits+=Index ')')* ']'
	//        //TODO ('classicControl' classicControl=ClassicControl)?
	//    '}';
	public MeasurementElements getMeasurementAccess() {
		return pMeasurement;
	}
	
	public ParserRule getMeasurementRule() {
		return getMeasurementAccess().getRule();
	}
	
	//CompositeQuantumGate returns CompositeQuantumGate:
	//    'CompositeQuantumGate'
	//    name=EString
	//    '{'
	//        (inverseForm?='inverseForm')?
	//        ('operation' operations+=Operation)?
	//        'targetQubits' '[' '(' targetQubits+=Index ')' ( ","  '(' targetQubits+=Index ')' )* ']'
	//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
	//        //TODO ('classicControl' classicControl=ClassicControl)?
	//        //TODO ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
	//    '}';
	public CompositeQuantumGateElements getCompositeQuantumGateAccess() {
		return pCompositeQuantumGate;
	}
	
	public ParserRule getCompositeQuantumGateRule() {
		return getCompositeQuantumGateAccess().getRule();
	}
	
	//Loop returns LoopOperation:
	//    'Loop'
	//    name=EString
	//    '{'
	//        (inverseForm?='inverseForm')?
	//        (incrementBlockTargetQubits?='incrementBlockTargetQubits')?
	//        (incrementBlockControlQubits?='incrementBlockControlQubits')?
	//        ('iterations' iterations=INT)?
	//        (incrementTargetQubits?='incrementTargetQubits')?
	//        (incrementControlQubits?='incrementControlQubits')?
	//        ('targetQubitsBlockSize' targetQubitsBlockSize=INT)?
	//        ('controlQubitsBlockSize' controlQubitsBlockSize=INT)?
	//        ('controlQubitsIterationType' controlQubitsIterationType=ITERATION_TYPE)?
	//        ('targetQubitsIterationType' targetQubitsIterationType=ITERATION_TYPE)?
	//        ('incrementBy' incrementBy=INT)?
	//        ('operations' '(' operations+=Operation ( "," operations+=Operation)* ')')?
	//        'targetQubits' '[' '(' targetQubits+=Index ')' ( "," '(' targetQubits+=Index ')' )* ']'
	//        ('controlQubits' '[' controlQubits+=Index ( "," controlQubits+=Index)* ']' )?
	//        ('fixedControlQubits' '[' fixedControlQubits+=Index ( "," fixedControlQubits+=Index)* ']' )?
	//        ('fixedTargetQubits' '[' fixedTargetQubits+=Index ( "," fixedTargetQubits+=Index)* ']' )?
	//        'loop' loop=[quope::ConcreteLoopOperation|EString]
	//        'loopTargetQubits' '[' '(' loopTargetQubits+=Index ')' ( "," '(' loopTargetQubits+=Index ')')* ']'
	//        ('loopControlQubits' '[' '(' loopControlQubits+=Index ')' ( "," '(' loopControlQubits+=Index ')' )* ']' )?
	////TODO    ('classicControl' classicControl=ClassicControl)?
	////        ('layers' '{' layers+=Layer ( "," layers+=Layer)* '}' )?
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Operation returns Operation:
	//    operation=[quope::ConcreteQuantumOperation|EString] ('(' qubo=[qubo::Qubo|EString] ')')?
	//    ;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Index returns Index:
	//    IndexInt | IndexRange
	//    ;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//IndexInt returns IndexInt:
	//    {IndexInt}
	//    (register=[Register|EString] ',')? index=INT
	//    ;
	public IndexIntElements getIndexIntAccess() {
		return pIndexInt;
	}
	
	public ParserRule getIndexIntRule() {
		return getIndexIntAccess().getRule();
	}
	
	//IndexRange returns IndexRange:
	//    {IndexRange}
	//    (register=[Register|EString] ',')? begin=INT'-'end=INT
	//    ;
	public IndexRangeElements getIndexRangeAccess() {
		return pIndexRange;
	}
	
	public ParserRule getIndexRangeRule() {
		return getIndexRangeAccess().getRule();
	}
	
	////
	////
	////
	////
	////
	////
	////
	////
	////
	////
	////
	////EStructuralFeature returns ecore::EStructuralFeature:
	////    EAttribute | EReference;
	////
	////
	////
	////
	////EClassifier returns ecore::EClassifier:
	////    EClass | EDataType_Impl | EEnum;
	////
	////
	////
	////
	////
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////
	////
	////
	////Qubit returns Qubit:
	////    {Qubit}
	////    'Qubit'
	////    id=EIntegerObject;
	////
	////EIntegerObject returns ecore::EIntegerObject:
	////    '-'? INT;
	////
	////ClassicBit returns ClassicBit:
	////    {ClassicBit}
	////    'ClassicBit'
	////    id=EIntegerObject;
	////
	////ClassicControl returns ClassicControl:
	////    'ClassicControl'
	////    '{'
	////        ('value' value=EDoubleObject)?
	////        'classicRegister' classicRegister=[ClassicRegister|EString]
	////    '}';
	////
	////ConcreteQuantumOperation returns quope::ConcreteQuantumOperation:
	////    (reversible?='reversible')?
	////    'ConcreteQuantumOperation'
	////    name=EString
	////    '{'
	////        ('abbreviation' abbreviation=EString)?
	////        ('paletteIconPath' paletteIconPath=EString)?
	////        ('styleIconPath' styleIconPath=EString)?
	////        'type' type=[ecore::EClass|EString]
	////        ('reverse' reverse=[quope::ConcreteQuantumOperation|EString])?
	////        ('parameter' parameter=Parameter)?
	////        ('fixedQuantumOperation' fixedQuantumOperation=FixedQuantumOperation)?
	////    '}';
	////
	////
	////
	////
	////
	////
	//EDoubleObject returns ecore::EDoubleObject:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleObjectElements getEDoubleObjectAccess() {
		return pEDoubleObject;
	}
	
	public ParserRule getEDoubleObjectRule() {
		return getEDoubleObjectAccess().getRule();
	}
	
	////
	////EClass returns ecore::EClass:
	////    {ecore::EClass}
	////    (abstract?='abstract')?
	////    (interface?='interface')?
	////    'EClass'
	////    name=EString
	////    '{'
	////        ('instanceClassName' instanceClassName=EString)?
	////        ('instanceTypeName' instanceTypeName=EString)?
	////        ('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	////        ('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
	////        ('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
	////        ('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	////    '}';
	////
	////Parameter returns quope::Parameter:
	////    {quope::Parameter}
	////    (theta?='theta')?
	////    (phi?='phi')?
	////    (lambda?='lambda')?
	////    'Parameter'
	////    ;
	////
	////FixedQuantumOperation returns quope::FixedQuantumOperation:
	////    'FixedQuantumOperation'
	////    '{'
	////        'numberOfTargetQubits' numberOfTargetQubits=EIntegerObject
	////        'numberOfControlQubits' numberOfControlQubits=EIntegerObject
	////        'numberOfClassicBits' numberOfClassicBits=EIntegerObject
	////    '}';
	////
	////EBooleanObject returns ecore::EBooleanObject:
	////    'true' | 'false';
	////
	////EAnnotation returns ecore::EAnnotation:
	////    {ecore::EAnnotation}
	////    'EAnnotation'
	////    '{'
	////        ('source' source=EString)?
	////        ('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
	////        ('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	////    '}';
	////
	////ETypeParameter returns ecore::ETypeParameter:
	////    {ecore::ETypeParameter}
	////    'ETypeParameter'
	////    name=EString
	////    '{'
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	////    '}';
	////
	////EBoolean returns ecore::EBoolean:
	////    'true' | 'false';
	////
	////EOperation returns ecore::EOperation:
	////    {ecore::EOperation}
	////    'EOperation'
	////    name=EString
	////    '{'
	////        ('ordered' ordered=EBoolean)?
	////        ('unique' unique=EBoolean)?
	////        ('lowerBound' lowerBound=EInt)?
	////        ('upperBound' upperBound=EInt)?
	////        ('eType' eType=[ecore::EClassifier|EString])?
	////        ('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eGenericType' eGenericType=EGenericType)?
	////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	////        ('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
	////        ('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	////    '}';
	////
	////EGenericType returns ecore::EGenericType:
	////    {ecore::EGenericType}
	////    'EGenericType'
	////    '{'
	////        ('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
	////        ('eClassifier' eClassifier=[ecore::EClassifier|EString])?
	////        ('eUpperBound' eUpperBound=EGenericType)?
	////        ('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
	////        ('eLowerBound' eLowerBound=EGenericType)?
	////    '}';
	////
	////EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	////    {ecore::EStringToStringMapEntry}
	////    'EStringToStringMapEntry'
	////    '{'
	////        ('key' key=EString)?
	////        ('value' value=EString)?
	////    '}';
	////
	////EObject returns ecore::EObject:
	////    {ecore::EObject}
	////    'EObject'
	////    ;
	////
	////EInt returns ecore::EInt:
	////    '-'? INT;
	////
	////EParameter returns ecore::EParameter:
	////    {ecore::EParameter}
	////    'EParameter'
	////    name=EString
	////    '{'
	////        ('ordered' ordered=EBoolean)?
	////        ('unique' unique=EBoolean)?
	////        ('lowerBound' lowerBound=EInt)?
	////        ('upperBound' upperBound=EInt)?
	////        ('eType' eType=[ecore::EClassifier|EString])?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eGenericType' eGenericType=EGenericType)?
	////    '}';
	////
	////EDataType_Impl returns ecore::EDataType:
	////    {ecore::EDataType}
	////    'EDataType'
	////    name=EString
	////    '{'
	////        ('instanceClassName' instanceClassName=EString)?
	////        ('instanceTypeName' instanceTypeName=EString)?
	////        ('serializable' serializable=EBoolean)?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	////    '}';
	////
	////EEnum returns ecore::EEnum:
	////    {ecore::EEnum}
	////    'EEnum'
	////    name=EString
	////    '{'
	////        ('instanceClassName' instanceClassName=EString)?
	////        ('instanceTypeName' instanceTypeName=EString)?
	////        ('serializable' serializable=EBoolean)?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	////        ('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	////    '}';
	////
	////EEnumLiteral returns ecore::EEnumLiteral:
	////    {ecore::EEnumLiteral}
	////    'EEnumLiteral'
	////    name=EString
	////    '{'
	////        ('value' value=EInt)?
	////        ('literal' literal=EString)?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////    '}';
	////
	////EAttribute returns ecore::EAttribute:
	////    {ecore::EAttribute}
	////    (volatile?='volatile')?
	////    (transient?='transient')?
	////    (unsettable?='unsettable')?
	////    (derived?='derived')?
	////    (iD?='iD')?
	////    'EAttribute'
	////    name=EString
	////    '{'
	////        ('ordered' ordered=EBoolean)?
	////        ('unique' unique=EBoolean)?
	////        ('lowerBound' lowerBound=EInt)?
	////        ('upperBound' upperBound=EInt)?
	////        ('changeable' changeable=EBoolean)?
	////        ('defaultValueLiteral' defaultValueLiteral=EString)?
	////        ('eType' eType=[ecore::EClassifier|EString])?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eGenericType' eGenericType=EGenericType)?
	////    '}';
	////
	////EReference returns ecore::EReference:
	////    {ecore::EReference}
	////    (volatile?='volatile')?
	////    (transient?='transient')?
	////    (unsettable?='unsettable')?
	////    (derived?='derived')?
	////    (containment?='containment')?
	////    'EReference'
	////    name=EString
	////    '{'
	////        ('ordered' ordered=EBoolean)?
	////        ('unique' unique=EBoolean)?
	////        ('lowerBound' lowerBound=EInt)?
	////        ('upperBound' upperBound=EInt)?
	////        ('changeable' changeable=EBoolean)?
	////        ('defaultValueLiteral' defaultValueLiteral=EString)?
	////        ('resolveProxies' resolveProxies=EBoolean)?
	////        ('eType' eType=[ecore::EClassifier|EString])?
	////        ('eOpposite' eOpposite=[ecore::EReference|EString])?
	////        ('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
	////        ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	////        ('eGenericType' eGenericType=EGenericType)?
	////    '}';
	////
	////
	////LoopOperation returns quope::LoopOperation:
	////    {quope::LoopOperation}
	////    'LoopOperation'
	////    name=EString
	////    '{'
	////        ('allowsFixedControlQubits' allowsFixedControlQubits=EBooleanObject)?
	////        ('allowsFixedTargetQubits' allowsFixedTargetQubits=EBooleanObject)?
	////        ('allowsControlQubitsIterationType' allowsControlQubitsIterationType=EBooleanObject)?
	////        ('allowsTargetQubitsIterationType' allowsTargetQubitsIterationType=EBooleanObject)?
	////        ('allowsControlQubitsBlockSize' allowsControlQubitsBlockSize=EBooleanObject)?
	////        ('allowsTargetQubitsBlockSize' allowsTargetQubitsBlockSize=EBooleanObject)?
	////        ('allowsIncrementControlQubits' allowsIncrementControlQubits=EBooleanObject)?
	////        ('allowsIncrementTargetQubits' allowsIncrementTargetQubits=EBooleanObject)?
	////        ('allowsIterations' allowsIterations=EBooleanObject)?
	////    '}';
	//enum ITERATION_TYPE returns ITERATION_TYPE:
	//                NONE = 'NONE' | SHIFT = 'SHIFT' | CHANGE_BLOCK = 'CHANGE_BLOCK';
	public ITERATION_TYPEElements getITERATION_TYPEAccess() {
		return eITERATION_TYPE;
	}
	
	public EnumRule getITERATION_TYPERule() {
		return getITERATION_TYPEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
